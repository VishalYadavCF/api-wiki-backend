{
  "commonauth.entities.mongo.AuditLogs.equals" : [ "commonauth.entities.mongo.AuditLogs.getUserName", "commonauth.entities.mongo.AuditLogs.getAppId", "commonauth.entities.mongo.AuditLogs.getDeviceType", "commonauth.entities.mongo.AuditLogs.getNewData", "commonauth.entities.mongo.AuditLogs.getAddedOn", "commonauth.entities.mongo.AuditLogs.canEqual", "commonauth.entities.mongo.AuditLogs.getUserAction", "commonauth.entities.mongo.AuditLogs.getOldData", "commonauth.entities.mongo.AuditLogs.getDeviceId", "commonauth.entities.mongo.AuditLogs.get_id", "commonauth.entities.mongo.AuditLogs.getAddedBy" ],
  "commonauth.entities.MessageClass$MessageClassBuilder.build" : [ "commonauth.entities.MessageClass.<init>" ],
  "commonauth.services.impl.ValidationServiceImpl.sendOtpOnChannel" : [ "commonauth.clients.NotificationSvcClient.sendOtpToEmail", "commonauth.util.Utility.createWhatsAppRequest", "commonauth.clients.NotificationSvcClient.sendOtpWhatsApp", "commonauth.enums.Environment.val", "commonauth.clients.NotificationSvcClient.sendOtpSms" ],
  "commonauth.enums.BlockedReason.values" : [ "[Lcommonauth.enums.BlockedReason;.clone" ],
  "commonauth.entities.responses.LoginStatusResponse$LoginStatusResponseBuilder.build" : [ "commonauth.entities.responses.LoginStatusResponse.<init>" ],
  "commonauth.entities.responses.SendEmailNotificationResponse.hashCode" : [ "commonauth.entities.responses.SendEmailNotificationResponse.getStatus", "commonauth.entities.responses.SendEmailNotificationResponse.getMessage" ],
  "commonauth.services.impl.UserServiceImpl.createConfirmForgotPasswordRequest" : [ "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordRequest.setConfirmationCode", "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordRequest.<init>", "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordRequest.setUsername", "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordRequest.setClientId", "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordRequest.setPassword", "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordRequest.setSecretHash" ],
  "commonauth.exceptions.OtpCommonException.<init>" : [ "commonauth.entities.errorclasses.ErrorDetail.setMessage", "commonauth.entities.errorclasses.ErrorDetail.setStatus", "commonauth.entities.errorclasses.ErrorDetail.<init>", "commonauth.entities.errorclasses.ErrorDetail.setReason" ],
  "commonauth.exceptions.UserAlreadyExistsException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.entities.requests.ApplicationConfigUpdateRequest.equals" : [ "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAppId", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthPage", "commonauth.entities.requests.ApplicationConfigUpdateRequest.canEqual", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffIncrementFactor", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getInitialBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRetry", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getSuccessRedirectUrl", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpLockDuration", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSize", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getName", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getLogo", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthFlow", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getEmailOtp", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSuccessCooldownPeriod", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getClientId", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getCustomText", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRegion", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxPasswordFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getClientSecret", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffStrategy", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getFailureRedirectUrl", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getUserPoolId" ],
  "commonauth.clients.CognitoClient.lambda$globalSignOutWithUserName$5" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminUserGlobalSignOut" ],
  "commonauth.exceptions.NotificationSvcClientException.<init>" : [ "commonauth.entities.errorclasses.ErrorDetail.setMessage", "commonauth.entities.errorclasses.ErrorDetail.setStatus", "commonauth.entities.errorclasses.ErrorDetail.<init>" ],
  "commonauth.entities.requests.GetUserProfileResponse.hashCode" : [ "commonauth.entities.requests.GetUserProfileResponse.getName", "commonauth.entities.requests.GetUserProfileResponse.getMetadata", "commonauth.entities.requests.GetUserProfileResponse.getEmail", "commonauth.entities.requests.GetUserProfileResponse.getPhoneNumber" ],
  "commonauth.clients.impl.LoginStatusNotifierClientImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.responses.EnableDisableUserResponse.builder" : [ "commonauth.entities.responses.EnableDisableUserResponse$EnableDisableUserResponseBuilder.<init>" ],
  "commonauth.configurations.TimeZoneConfig.initializeTimeZone" : [ "org.slf4j.Logger.info", "org.slf4j.Logger.error" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.handleEmailValidation" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.exceptions.OtpRequestValidationException.<init>" ],
  "commonauth.enums.IdentityProvider.<clinit>" : [ "commonauth.enums.IdentityProvider.<init>", "commonauth.enums.IdentityProvider.$values" ],
  "commonauth.entities.requests.InitiateLoginRequest.toString" : [ "commonauth.entities.requests.InitiateLoginRequest.getNotifyUrl", "commonauth.entities.requests.InitiateLoginRequest.getIdentifierType", "commonauth.entities.requests.InitiateLoginRequest.getIdentifierId", "commonauth.entities.requests.InitiateLoginRequest.getLoginTheme" ],
  "commonauth.controllers.UserController.listUserGet" : [ "commonauth.services.impl.UserServiceImpl.handleListUsersGet", "org.slf4j.Logger.info" ],
  "commonauth.util.Utility.getSecretHash" : [ "javax.crypto.Mac.getInstance", "javax.crypto.Mac.init", "commonauth.exceptions.SecretHashCalculationException.<init>", "org.apache.commons.codec.binary.Base64.encodeBase64", "javax.crypto.Mac.doFinal", "javax.crypto.spec.SecretKeySpec.<init>", "javax.crypto.Mac.update" ],
  "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.findByAuthCode" : [ "commonauth.repository.AuthcodeTokenPairRepository.findByAuthCode" ],
  "commonauth.aspects.ControllerAdvice.onAuthCodePairDAOException" : [ "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build" ],
  "commonauth.services.impl.TruecallerLoginImpl.getUserProfile" : [ "commonauth.entities.requests.GetUserProfileRequest.getUserProfileEndpoint", "org.apache.logging.log4j.util.Strings.isBlank", "commonauth.services.impl.TruecallerLoginImpl.getValidAuthCodeTokenPair", "commonauth.entities.requests.GetUserProfileRequest.getLoginRequestId", "org.slf4j.Logger.info", "commonauth.services.impl.TruecallerLoginImpl.getUserProfileResponseFromTruecallerResponse", "commonauth.services.impl.TruecallerLoginImpl.getValueFromAuthTokenMetadata", "commonauth.clients.impl.TruecallerClientImpl.getUserProfile", "commonauth.entities.db.AuthcodeTokenPair.getToken", "commonauth.entities.requests.GetUserProfileRequest.setUserProfileEndpoint" ],
  "commonauth.enums.WhitelistedCountries.<clinit>" : [ "commonauth.enums.WhitelistedCountries.$values", "commonauth.enums.WhitelistedCountries.<init>" ],
  "commonauth.controllers.UserController.deleteUser" : [ "commonauth.services.impl.UserServiceImpl.handleDeleteUser", "org.slf4j.Logger.info" ],
  "commonauth.services.impl.UserServiceImpl.handleForgotPassword" : [ "commonauth.clients.CognitoClient.forgotPassword", "commonauth.entities.requests.ForgotPassRequest.getUsername", "commonauth.exceptions.ForgotPasswordNon200ResponseException.<init>", "commonauth.entities.requests.ForgotPassRequest.getAppId", "commonauth.clients.CognitoClient.getClientId", "commonauth.entities.responses.ForgotPassResponse.builder", "com.amazonaws.services.cognitoidp.model.ForgotPasswordRequest.setClientId", "commonauth.clients.CognitoClient.getClientSecret", "com.amazonaws.services.cognitoidp.model.ForgotPasswordRequest.setUsername", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "com.amazonaws.services.cognitoidp.model.ForgotPasswordResult.getSdkHttpMetadata", "com.amazonaws.services.cognitoidp.model.ForgotPasswordRequest.setSecretHash", "commonauth.entities.responses.ForgotPassResponse$ForgotPassResponseBuilder.message", "commonauth.util.Utility.getSecretHash", "com.amazonaws.services.cognitoidp.model.ForgotPasswordRequest.<init>", "com.amazonaws.http.SdkHttpMetadata.getHttpStatusCode", "commonauth.entities.responses.ForgotPassResponse$ForgotPassResponseBuilder.build" ],
  "commonauth.exceptions.UserNotExistsException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.entities.requests.InitiateLoginResponse.equals" : [ "commonauth.entities.requests.InitiateLoginResponse.getRedirectUrl", "commonauth.entities.requests.InitiateLoginResponse.canEqual", "commonauth.entities.requests.InitiateLoginResponse.getLoginRequestId" ],
  "commonauth.entities.requests.SendGeneralEmailRequest.equals" : [ "commonauth.entities.requests.SendGeneralEmailRequest.getSource", "commonauth.entities.requests.SendGeneralEmailRequest.getRequestId", "commonauth.entities.requests.SendGeneralEmailRequest.getData", "commonauth.entities.requests.SendGeneralEmailRequest.canEqual", "commonauth.entities.requests.SendGeneralEmailRequest.getReplyTo", "commonauth.entities.requests.SendGeneralEmailRequest.getToSet", "commonauth.entities.requests.SendGeneralEmailRequest.getTemplate" ],
  "commonauth.entities.responses.ConfirmForgotPassResponse$ConfirmForgotPassResponseBuilder.build" : [ "commonauth.entities.responses.ConfirmForgotPassResponse.<init>" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.<init>" : [ "commonauth.configurations.CommonauthConfiguration.getNotificationsvcurl", "org.springframework.boot.web.client.RestTemplateBuilder.setConnectTimeout", "org.springframework.boot.web.client.RestTemplateBuilder.build", "org.springframework.web.reactive.function.client.WebClient$Builder.build" ],
  "commonauth.controllers.AuthController.initAuth" : [ "commonauth.services.impl.OtpValidationServiceImpl.handleInitAuth", "org.springframework.http.HttpStatusCode.valueOf", "commonauth.exceptions.HttpClientException.getMessage", "commonauth.services.impl.MerchantAuthServiceImpl.handleInitAuth", "org.springframework.http.ResponseEntity.<init>", "commonauth.entities.errorclasses.OTPErrorDetail.getStatus", "commonauth.services.PasswordLessCustomAuthService.initiateCustomAuth", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.entities.requests.InitAuthRequest.setIp", "org.springframework.http.HttpStatus.value", "commonauth.services.impl.PartnersAuthServiceImpl.handleInitAuth", "commonauth.entities.responses.InitAuthResponse.setMessage", "commonauth.entities.responses.InitAuthResponse.setAuth", "commonauth.util.CDBUtils.extractClientIP", "org.springframework.http.ResponseEntity.ok", "commonauth.entities.requests.InitAuthRequest.getIp", "commonauth.entities.responses.InitAuthResponse.setAuthenticationFailed", "commonauth.exceptions.HttpClientException.getOtpErrorDetail", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.util.MaskingUtils.maskUserName", "commonauth.services.AuthenticationService.handleInitAuth", "commonauth.entities.responses.InitAuthResponse.<init>", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.controllers.AuthController.auth" : [ "commonauth.services.AuthenticationService.handleAuth", "org.apache.http.client.utils.URIBuilder.addParameter", "org.springframework.http.ResponseEntity.status", "org.apache.http.client.utils.URIBuilder.<init>", "org.apache.http.client.utils.URIBuilder.build", "org.springframework.http.ResponseEntity$BodyBuilder.build", "org.springframework.http.ResponseEntity$BodyBuilder.location" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.hashCode" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getStatus", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getLoginRequestId", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getData" ],
  "commonauth.entities.requests.EnableDisableUserRequest.toString" : [ "commonauth.util.MaskingUtils.maskUserName" ],
  "commonauth.entities.requests.SendGeneralEmailRequest.hashCode" : [ "commonauth.entities.requests.SendGeneralEmailRequest.getSource", "commonauth.entities.requests.SendGeneralEmailRequest.getRequestId", "commonauth.entities.requests.SendGeneralEmailRequest.getData", "commonauth.entities.requests.SendGeneralEmailRequest.getReplyTo", "commonauth.entities.requests.SendGeneralEmailRequest.getToSet", "commonauth.entities.requests.SendGeneralEmailRequest.getTemplate" ],
  "commonauth.util.CDBUtils.get2FAChannelValue" : [ "commonauth.util.CDBUtils.getPhoneNumberWithCode", "commonauth.util.CDBUtils.getG2FAChannelValue", "commonauth.enums.OtpChannel.ordinal" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.resendOtp" : [ "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.resendOtpRequestValidation", "commonauth.entities.db.Login2FACache.getLockId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getOtpCacheId", "commonauth.entities.db.Login2FACache.getChannelType", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.setLockId", "org.slf4j.Logger.info", "commonauth.services.impl.MerchantAuthServiceImpl.mapToGenerateOtpRequestV2", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.setChannelValue", "commonauth.services.ValidationService.generateOtpV2", "commonauth.entities.db.Login2FACache.getChannelVal", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.setChannel", "commonauth.entities.db.Login2FACache.getSecondary2FAChannels", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.setSecondary2FAChannels", "commonauth.services.impl.MerchantAuthServiceImpl.fetchCache2FALoginData" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.get2FAChannels" : [ "org.apache.commons.lang3.StringUtils.isNotBlank" ],
  "commonauth.exceptions.InconsistentChannelValException.<init>" : [ "commonauth.entities.errorclasses.ErrorDetail.setMessage", "commonauth.entities.errorclasses.ErrorDetail.<init>" ],
  "commonauth.controllers.ApplicationController.deleteById" : [ "commonauth.services.ApplicationService.deleteById", "commonauth.entities.responses.GenericOperationResponse.<init>" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.builder" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.<init>" ],
  "commonauth.entities.MessageClass.builder" : [ "commonauth.entities.MessageClass$MessageClassBuilder.<init>" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.toString" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.getEmail" ],
  "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.hashCode" : [ "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getLockId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getOtpCacheId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.isLoginFlow", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getChannel", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getAppId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getChannelValue" ],
  "commonauth.aspects.ControllerAdvice.onNotificationSvcClientException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error", "commonauth.exceptions.NotificationSvcClientException.getErrorDetail" ],
  "commonauth.services.impl.UserServiceImpl.handleCreateUser" : [ "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUsername", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserAttributes", "commonauth.entities.requests.CreateUserRequest.getUsername", "commonauth.entities.requests.CreateUserRequest.getAppId", "commonauth.entities.requests.CreateUserRequest.isResendConfirmationMessage", "commonauth.entities.requests.CreateUserRequest.isSendTempPassword", "commonauth.services.impl.UserServiceImpl.handleCreateUserResponse", "org.slf4j.Logger.info", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setMessageAction", "commonauth.entities.requests.CreateUserRequest.getUserAttributesMap", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.<init>", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.requests.CreateUserRequest.validateCreateUserRequest", "commonauth.entities.requests.CreateUserRequest.getUserAttribute", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserPoolId", "commonauth.util.CDBUtils.getUpdatedKnownDevices", "commonauth.clients.CognitoClient.getUserPoolId", "commonauth.util.Utility.userAttributesMapToList" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.equals" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getCountryCode", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.canEqual", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getStreet", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getCity", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getZipcode" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.toString" : [ "commonauth.util.MaskingUtils.maskChannelValue" ],
  "commonauth.entities.db.Login2FACache.equals" : [ "commonauth.entities.db.Login2FACache.getDeviceId", "commonauth.entities.db.Login2FACache.getLockId", "commonauth.entities.db.Login2FACache.getLoginMeta", "commonauth.entities.db.Login2FACache.getUserName", "commonauth.entities.db.Login2FACache.getChannelType", "commonauth.entities.db.Login2FACache.getChannelVal", "commonauth.entities.db.Login2FACache.canEqual", "commonauth.entities.db.Login2FACache.getAuthCode", "commonauth.entities.db.Login2FACache.getEmail", "commonauth.entities.db.Login2FACache.getSecondary2FAChannels" ],
  "commonauth.aspects.ControllerAdvice.onServiceApplicationNotFound" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.ServiceApplicationNotFoundException.getErrorDetail" ],
  "commonauth.controllers.UserLoginController.initiateLogin" : [ "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.data", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.build", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.success", "org.slf4j.Logger.info", "commonauth.factory.UserLoginContext.initiateLogin", "commonauth.entities.responses.GenericHTTPResponse.builder", "org.slf4j.Logger.error" ],
  "commonauth.exceptions.ErrorConstants$ErrorType.values" : [ "[Lcommonauth.exceptions.ErrorConstants$ErrorType;.clone" ],
  "commonauth.entities.responses.LoginStatusResponse.builder" : [ "commonauth.entities.responses.LoginStatusResponse$LoginStatusResponseBuilder.<init>" ],
  "commonauth.entities.requests.SendGeneralEmailRequest$1.<init>" : [ "commonauth.entities.requests.SendGeneralEmailRequest$1.put" ],
  "commonauth.clients.impl.ShieldSvcClientImpl.getRegionAndProxyDetails" : [ "org.springframework.web.util.UriComponentsBuilder.path", "org.springframework.web.client.HttpClientErrorException.getResponseBodyAsString", "org.springframework.web.client.RestTemplate.getForObject", "org.springframework.web.util.UriComponentsBuilder.uri", "org.springframework.web.util.UriComponentsBuilder.newInstance", "org.springframework.web.util.UriComponents.toUri", "org.springframework.web.util.UriComponentsBuilder.encode", "org.slf4j.Logger.info", "org.springframework.web.client.HttpServerErrorException.getResponseBodyAsString", "org.slf4j.Logger.error", "org.springframework.web.util.UriComponentsBuilder.build" ],
  "commonauth.enums.Environment.values" : [ "[Lcommonauth.enums.Environment;.clone" ],
  "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.equals" : [ "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isDevice2faDisable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isLogin2faEnable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isGamma2faEnable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.getEntityId", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.canEqual" ],
  "commonauth.util.Utility.isMockOtpApplicableForChannel" : [ "commonauth.enums.Environment.val", "io.micrometer.common.util.StringUtils.isBlank" ],
  "commonauth.clients.CognitoClient.globalSignOutWithUserName" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.services.impl.UserServiceImpl.getFilterString" : [ "commonauth.enums.FilterOperation.toFilterString", "commonauth.entities.requests.FilterUsersRequest.getFilters", "commonauth.enums.FilterOperation.fromOperationKey" ],
  "commonauth.exceptions.CommonAuthServerException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.clients.impl.ReCaptchaClientImpl.<init>" : [ "commonauth.clients.impl.ReCaptchaClientImpl.getRecaptchaHeaders", "org.springframework.boot.web.client.RestTemplateBuilder.setConnectTimeout", "org.springframework.boot.web.client.RestTemplateBuilder.build" ],
  "commonauth.exceptions.OtpValidationException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.util.Utility.extractClaim" : [ "com.nimbusds.jwt.JWTClaimsSet.parse", "com.nimbusds.jose.JWSObject.getPayload", "com.nimbusds.jwt.JWTClaimsSet.getStringClaim", "com.nimbusds.jose.JWSObject.parse", "org.slf4j.Logger.error", "com.nimbusds.jose.Payload.toJSONObject" ],
  "commonauth.services.impl.ValidationServiceImpl.isOtpValid" : [ "commonauth.util.Utility.getHashByOtpAndChannelVal", "commonauth.exceptions.HttpClientException.<init>", "commonauth.util.G2FAUtil.isG2FACodeValid", "commonauth.entities.db.OtpVerificationDetails.getOtpChannel", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getOtpValue", "commonauth.entities.db.OtpVerificationDetails.getEncryptedOtpToken", "commonauth.entities.db.OtpVerificationDetails.getOtpChannelVal" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.updateVerificationDetailsInDB" : [ "commonauth.entities.db.OtpVerificationDetails.getOtpFailedAttempts", "commonauth.dao.OtpVerificationDetailsDAO.updateByOtpId", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "org.slf4j.Logger.error", "commonauth.entities.db.OtpVerificationDetails.setUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.setOtpFailedAttempts", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getServiceApplication" : [ "commonauth.exceptions.ServiceApplicationNotFoundException.<init>", "commonauth.dao.ServiceApplicationDAO.findById", "org.slf4j.Logger.info" ],
  "commonauth.services.impl.TruecallerLoginImpl.lambda$getTruecallerLoginDeepLink$0" : [ "org.springframework.web.util.UriComponentsBuilder.queryParam" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.<init>" : [ "com.fasterxml.jackson.databind.ObjectMapper.registerModule", "com.fasterxml.jackson.databind.ObjectMapper.<init>", "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule.<init>" ],
  "commonauth.aspects.ControllerAdvice.onAuthCodeTokenPairInsertionException" : [ "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build" ],
  "commonauth.aspects.ControllerAdvice.onUsernameExistsException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.enums.FilterAttribute.values" : [ "[Lcommonauth.enums.FilterAttribute;.clone" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleDeleteAuthCode" : [ "commonauth.entities.responses.GenericOperationResponse.setHttpStatus", "commonauth.entities.responses.GenericOperationResponse.setSuccessMessage", "commonauth.entities.responses.GenericOperationResponse.<init>", "commonauth.entities.responses.GenericOperationResponse.setCode", "org.springframework.http.HttpStatus.value", "commonauth.dao.AuthcodeTokenPairDAO.deleteByAuthCode", "org.slf4j.Logger.error", "commonauth.entities.responses.GenericOperationResponse.setSuccess", "commonauth.entities.responses.GenericOperationResponse.setDetail" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.sendOtpSms" : [ "org.springframework.web.reactive.function.client.WebClient.create", "org.springframework.web.reactive.function.client.WebClient.post", "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec.contentType", "org.springframework.web.reactive.function.BodyInserters.fromValue", "org.springframework.web.reactive.function.client.WebClientResponseException.getStatusCode", "org.springframework.http.HttpStatusCode.value", "commonauth.exceptions.HttpClientException.<init>", "commonauth.exceptions.NotificationSvcClientException.<init>", "org.slf4j.Logger.error", "commonauth.clients.impl.NotificationSvcClientImpl.createSmsRequest", "commonauth.entities.notificationSvc.SmsRequest.setRequestId", "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec.body", "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec.retrieve", "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec.uri", "reactor.core.publisher.Mono.block", "org.springframework.web.reactive.function.client.WebClient$ResponseSpec.bodyToMono", "commonauth.configurations.CommonauthConfiguration.getNotificationsvcurl", "commonauth.metrics.Metrics.incrementNotificationServiceFailure", "commonauth.entities.notificationSvc.SmsRequest.setSource" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.updateKnownDevicesInCognito" : [ "com.amazonaws.services.cognitoidp.model.AttributeType.withName", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.withUsername", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.withUserAttributes", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.withUserPoolId", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.<init>", "commonauth.util.CDBUtils.getUpdatedKnownDevices", "org.slf4j.Logger.error", "commonauth.clients.CognitoClient.getUserPoolId", "commonauth.clients.CognitoClient.updateUserAttributes", "com.amazonaws.services.cognitoidp.model.AttributeType.withValue" ],
  "commonauth.entities.requests.G2FaQrCodeResponse.equals" : [ "commonauth.entities.requests.G2FaQrCodeResponse.getQrUrl", "commonauth.entities.requests.G2FaQrCodeResponse.canEqual", "commonauth.entities.requests.G2FaQrCodeResponse.getSetupKey", "commonauth.entities.requests.G2FaQrCodeResponse.getQrCode" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.getUserAction" : [ "commonauth.entities.requests.InitAuthRequest.getAuthFlowType", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.requests.InitAuthRequest.getAccountAlias", "commonauth.entities.requests.InitAuthRequest.getEmail", "commonauth.entities.requests.InitAuthRequest.getAliasUserName", "commonauth.entities.requests.InitAuthRequest.getGoogleIdToken" ],
  "commonauth.clients.CognitoClient.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.clients.impl.ReCaptchaClientImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.aspects.ControllerAdvice.onCreateUserInvalidParameterException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "org.slf4j.Logger.error" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.toString" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getMessage", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getStatus", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getTitle" ],
  "commonauth.enums.OtpVerificationStatus.values" : [ "[Lcommonauth.enums.OtpVerificationStatus;.clone" ],
  "commonauth.enums.UserEntityType.values" : [ "[Lcommonauth.enums.UserEntityType;.clone" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.equals" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.isLoginFlow", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getAppId", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannelValue", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.canEqual", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getOtpValue", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannel", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getLockId", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getOtpCacheId" ],
  "commonauth.enums.FilterOperation.values" : [ "[Lcommonauth.enums.FilterOperation;.clone" ],
  "commonauth.entities.twoFactorAuthentication.TwoFALoginData.hashCode" : [ "commonauth.entities.twoFactorAuthentication.TwoFALoginData.getChannel", "commonauth.entities.twoFactorAuthentication.TwoFALoginData.getChannelValue" ],
  "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.build" : [ "commonauth.entities.responses.RefreshTokenResponse.<init>" ],
  "commonauth.util.filters.CustomHttpServletRequestWrapper.<init>" : [ "jakarta.servlet.http.HttpServletRequest.getInputStream", "jakarta.servlet.http.HttpServletRequestWrapper.<init>", "jakarta.servlet.ServletInputStream.readAllBytes" ],
  "commonauth.util.G2FAUtil.hmacSha" : [ "javax.crypto.Mac.getInstance", "javax.crypto.Mac.init", "javax.crypto.Mac.doFinal", "javax.crypto.spec.SecretKeySpec.<init>" ],
  "commonauth.aspects.ControllerAdvice.onWebClientException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.storeTokensInDB" : [ "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getIdToken", "commonauth.exceptions.CommonAuthServerException.<init>", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.insertAuthCredPair", "commonauth.util.Utility.getRandomAlphaNumericString", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.entities.responses.RegionProxyData.hashCode" : [ "commonauth.entities.responses.RegionProxyData.getProxyTypeRiskScore", "commonauth.entities.responses.RegionProxyData.getRegion", "commonauth.entities.responses.RegionProxyData.getCityRiskScore", "commonauth.entities.responses.RegionProxyData.getCountryCode", "commonauth.entities.responses.RegionProxyData.getCity", "commonauth.entities.responses.RegionProxyData.getCountryName", "commonauth.entities.responses.RegionProxyData.getProxyType" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.configurations.RedisConfig.<init>" : [ "com.fasterxml.jackson.databind.ObjectMapper.registerModule", "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder.allowIfBaseType", "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder.build", "com.fasterxml.jackson.databind.ObjectMapper.configure", "com.fasterxml.jackson.databind.ObjectMapper.<init>", "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule.<init>", "com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping", "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.builder" ],
  "commonauth.enums.LoginStatus.values" : [ "[Lcommonauth.enums.LoginStatus;.clone" ],
  "commonauth.aspects.ControllerAdvice.onUserNotFoundException" : [ "org.springframework.http.ResponseEntity.badRequest", "commonauth.entities.MessageClass$MessageClassBuilder.build", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.MessageClass.builder", "org.slf4j.Logger.error", "commonauth.entities.MessageClass$MessageClassBuilder.message" ],
  "commonauth.controllers.DevController.clearCache" : [ "org.springframework.cache.CacheManager.getCacheNames" ],
  "commonauth.controllers.DevController.lambda$clearCache$0" : [ "org.springframework.cache.Cache.clear", "org.springframework.cache.CacheManager.getCache" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse.toString" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse.getOnlineIdentities", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getAvatarUrl", "commonauth.entities.truecaller.TruecallerUserProfileResponse.isActive", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getName", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getAddresses", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getGender", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getPhoneNumbers" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.hashCode" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getLastName", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getFirstName" ],
  "commonauth.clients.impl.GoogleAuthClientImpl.<init>" : [ "com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier$Builder.<init>", "com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier$Builder.setAudience", "com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier$Builder.setAcceptableTimeSkewSeconds", "com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier$Builder.build", "com.google.api.client.googleapis.javanet.GoogleNetHttpTransport.newTrustedTransport", "com.google.api.client.json.gson.GsonFactory.<init>" ],
  "commonauth.clients.CognitoClient.confirmForgotPassword" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.controllers.ValidationController.generateOtp" : [ "commonauth.entities.requests.OtpChannelRequest.otpChannelRequestValidation", "commonauth.services.ValidationService.handleGenerateOtp" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData$ProfileDataBuilder.build" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.<init>" ],
  "commonauth.enums.FilterAttribute.fromQueryParam" : [ "commonauth.enums.FilterAttribute.values" ],
  "commonauth.metrics.Metrics.incrementCognitoBadRequestError" : [ "io.micrometer.core.instrument.MeterRegistry.counter", "io.micrometer.core.instrument.Counter.increment" ],
  "commonauth.entities.responses.RefreshTokenResponse.builder" : [ "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.<init>" ],
  "commonauth.clients.CognitoClient.lambda$updateUserAttributes$2" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminUpdateUserAttributes" ],
  "commonauth.configurations.ApplicationThreadPool.applicationExecutor" : [ "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setThreadNamePrefix", "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.<init>", "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setMaxPoolSize", "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setCorePoolSize", "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize", "org.slf4j.Logger.info" ],
  "commonauth.factory.UserLoginContext.getLoginStatus" : [ "commonauth.factory.UserLoginContext.getUserLoginStrategy", "commonauth.factory.UserLoginStrategy.getLoginStatus" ],
  "commonauth.services.impl.TruecallerLoginImpl.getValueFromAuthTokenMetadata" : [ "commonauth.entities.db.AuthcodeTokenPair.getMetadata" ],
  "commonauth.clients.CognitoClient.refreshToken" : [ "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.withAuthFlow", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.withClientId", "org.apache.logging.log4j.util.Strings.isBlank", "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.authCode", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.<init>", "commonauth.util.MetricsUtil.executeWithMetrics", "commonauth.clients.CognitoClient.storeTokensInDB", "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.jwtToken", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getIdToken", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.withUserPoolId", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.jwtIdtoken", "commonauth.entities.responses.RefreshTokenResponse.builder", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.setRefreshToken", "commonauth.exceptions.GenericException.<init>", "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.build", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.addAuthParametersEntry", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.configurations.AWSCredentialsProviderConfig.awsCredentialsProviderV1" : [ "com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder.build", "com.amazonaws.auth.WebIdentityTokenCredentialsProvider.create", "com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider$Builder.withStsClient", "org.slf4j.Logger.info", "com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder.standard", "com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider$Builder.build", "com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder.withCredentials", "com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider$Builder.<init>" ],
  "commonauth.entities.requests.OtpVerificationRequest.hashCode" : [ "commonauth.entities.requests.OtpVerificationRequest.getOtpId", "commonauth.entities.requests.OtpVerificationRequest.getAppId", "commonauth.entities.requests.OtpVerificationRequest.getOtpValue", "commonauth.entities.requests.OtpVerificationRequest.getChannelValue" ],
  "commonauth.clients.CognitoClient.getUser" : [ "commonauth.util.MetricsUtil.executeWithMetrics", "com.amazonaws.services.cognitoidp.model.AdminGetUserResult.getEnabled", "com.amazonaws.services.cognitoidp.model.AdminGetUserResult.getUserAttributes", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminGetUser", "com.amazonaws.services.cognitoidp.model.AdminGetUserRequest.withUsername", "com.amazonaws.services.cognitoidp.model.AdminGetUserResult.getUsername", "com.amazonaws.services.cognitoidp.model.AdminGetUserRequest.withUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminGetUserRequest.<init>" ],
  "commonauth.util.MaskingUtils.maskEntirely" : [ "io.micrometer.common.util.StringUtils.isBlank" ],
  "commonauth.util.CDBUtils.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.isSendOtpApplicable" : [ "org.springframework.util.CollectionUtils.isEmpty", "commonauth.dao.OtpVerificationDetailsDAO.findByKeyNameAndAddedOn", "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.allowedSuccessfulAttempts", "commonauth.entities.db.OtpVerificationDetails.getAddedOn", "org.slf4j.Logger.error", "commonauth.entities.requests.InitAuthRequest.getUsername", "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.blockingDurationForDuplicateRequests" ],
  "commonauth.services.impl.UserServiceImpl.handleGetG2FAQR" : [ "commonauth.entities.requests.G2faQrRequest.getToken", "commonauth.util.G2FAUtil.generateQRCode", "commonauth.util.G2faUrlBuilder.setName", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.util.G2faUrlBuilder.withSecret", "commonauth.entities.responses.GenericOperationResponse.withErrorMessage", "com.amazonaws.services.cognitoidp.model.AttributeType.withValue", "commonauth.entities.requests.UpdateUserRequest$UpdateUserRequestBuilder.build", "com.amazonaws.services.cognitoidp.model.AttributeType.withName", "com.amazonaws.services.cognitoidp.model.GetUserResult.getUserAttributes", "org.springframework.http.HttpStatus.name", "commonauth.entities.requests.G2FaQrCodeResponse.setSetupKey", "commonauth.util.G2faUrlBuilder.build", "org.springframework.http.HttpStatus.value", "commonauth.util.G2FAUtil.generateSecret", "commonauth.entities.requests.G2faQrRequest.getAppId", "org.apache.commons.lang3.StringUtils.isEmpty", "commonauth.entities.requests.G2FaQrCodeResponse.setQrCode", "commonauth.entities.requests.G2FaQrCodeResponse.setSuccessMessage", "commonauth.util.G2faUrlBuilder.withUserEntityType", "commonauth.clients.CognitoClient.getUser", "commonauth.entities.requests.G2FaQrCodeResponse.setQrUrl", "com.amazonaws.services.cognitoidp.model.GetUserResult.getSdkHttpMetadata", "commonauth.util.Utility.userAttributesListToMap", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.requests.UpdateUserRequest.builder", "commonauth.entities.requests.G2faQrRequest.isShareQRCode", "com.amazonaws.services.cognitoidp.model.GetUserRequest.<init>", "commonauth.entities.requests.UpdateUserRequest$UpdateUserRequestBuilder.accessToken", "com.amazonaws.services.cognitoidp.model.GetUserRequest.withAccessToken", "commonauth.util.MaskingUtils.maskUserName", "commonauth.entities.requests.G2FaQrCodeResponse.<init>", "com.amazonaws.http.SdkHttpMetadata.getHttpStatusCode", "commonauth.exceptions.GenericException.<init>", "commonauth.services.impl.UserServiceImpl.handleUserUpdate" ],
  "commonauth.entities.responses.InitAuthResponse.builder" : [ "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.<init>" ],
  "commonauth.enums.TokenType.values" : [ "[Lcommonauth.enums.TokenType;.clone" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse.equals" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse.getOnlineIdentities", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getAvatarUrl", "commonauth.entities.truecaller.TruecallerUserProfileResponse.isActive", "commonauth.entities.truecaller.TruecallerUserProfileResponse.canEqual", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getName", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getAddresses", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getGender", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getPhoneNumbers" ],
  "commonauth.entities.requests.UpdateUserRequest.builder" : [ "commonauth.entities.requests.UpdateUserRequest$UpdateUserRequestBuilder.<init>" ],
  "commonauth.util.CDBUtils.isEnvProdOrProdInt" : [ "commonauth.enums.Environment.val" ],
  "commonauth.entities.responses.GoogleCaptchaVerificationResponse.equals" : [ "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getAction", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getHostname", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getScore", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.isSuccess", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.canEqual", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getChallengeTimestamp", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getErrorCodes", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getApkName" ],
  "commonauth.enums.ComponentName.<clinit>" : [ "commonauth.enums.ComponentName.$values", "commonauth.enums.ComponentName.<init>" ],
  "commonauth.util.MetricsUtil.executeWithMetrics" : [ "io.micrometer.core.instrument.MeterRegistry.counter", "io.micrometer.core.instrument.MeterRegistry.timer", "commonauth.enums.ComponentName.name", "io.micrometer.core.instrument.Timer.record", "io.micrometer.core.instrument.Counter.increment" ],
  "commonauth.util.MaskingUtils.lambda$maskUserAttributes$0" : [ "commonauth.util.MaskingUtils.genericMask", "commonauth.util.MaskingUtils.maskPhoneNumber", "commonauth.util.MaskingUtils.maskEmail" ],
  "commonauth.token.AwsCognitoRSAKeyProvider.getPrivateKey" : [ "commonauth.token.AwsCognitoRSAKeyProvider.getPrivateKey" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createSuccessRespondToAuthResponse" : [ "commonauth.entities.db.ServiceApplication.getSuccessRedirectUrl", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.authenticationFailed", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.build", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.authCode", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.redirectUrl", "commonauth.entities.responses.RespondToAuthResponse.builder", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.isAuth" ],
  "commonauth.clients.impl.ReCaptchaClientImpl.verifyCaptcha" : [ "org.springframework.web.util.UriComponentsBuilder.uri", "org.springframework.web.util.UriComponentsBuilder.newInstance", "commonauth.exceptions.HttpServerException.<init>", "commonauth.entities.Constants$CaptchaSource.name", "org.springframework.util.MultiValueMap.add", "org.springframework.http.HttpEntity.<init>", "org.springframework.web.util.UriComponents.toUri", "org.slf4j.Logger.error", "org.springframework.web.util.UriComponentsBuilder.build", "org.springframework.util.LinkedMultiValueMap.<init>", "org.springframework.web.client.RestTemplate.postForObject" ],
  "commonauth.entities.requests.AdminUpdatePasswordRequest.toString" : [ "commonauth.util.MaskingUtils.maskUserName" ],
  "commonauth.controllers.AuthController.deleteAuthCode" : [ "org.springframework.http.HttpStatusCode.valueOf", "commonauth.services.AuthenticationService.handleDeleteAuthCode", "org.springframework.http.ResponseEntity.<init>", "commonauth.entities.responses.GenericOperationResponse.getHttpStatus", "org.slf4j.Logger.info" ],
  "commonauth.enums.FilterOperation.fromOperationKey" : [ "commonauth.enums.FilterOperation.values" ],
  "commonauth.entities.responses.RegionProxyData.toString" : [ "commonauth.entities.responses.RegionProxyData.getProxyTypeRiskScore", "commonauth.entities.responses.RegionProxyData.getRegion", "commonauth.entities.responses.RegionProxyData.getCityRiskScore", "commonauth.entities.responses.RegionProxyData.getCountryCode", "commonauth.entities.responses.RegionProxyData.getCity", "commonauth.entities.responses.RegionProxyData.getCountryName", "commonauth.entities.responses.RegionProxyData.getProxyType" ],
  "commonauth.controllers.AuthController.validateGoogleIdTokenAndExtractEmail" : [ "org.springframework.http.HttpStatusCode.valueOf", "org.springframework.http.ResponseEntity.<init>", "commonauth.services.AuthenticationService.validateGoogleIdTokenAndExtractEmail", "commonauth.entities.responses.GenericOperationResponse.getHttpStatus" ],
  "commonauth.clients.impl.LoginStatusNotifierClientImpl.notify" : [ "commonauth.util.Utility.getMDCXRequestId", "org.springframework.http.ResponseEntity.getStatusCode", "org.apache.commons.lang3.StringUtils.isBlank", "org.springframework.http.HttpHeaders.set", "org.springframework.web.client.RestTemplate.exchange", "org.springframework.http.HttpHeaders.<init>", "org.springframework.http.HttpEntity.<init>", "org.slf4j.Logger.info", "org.slf4j.Logger.error" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.createEmailRequestData" : [ "commonauth.entities.notificationSvc.EmailRequestData.setCustomTitle", "commonauth.entities.notificationSvc.EmailRequestData.<init>", "commonauth.entities.notificationSvc.EmailRequestData.setDuration", "commonauth.entities.notificationSvc.EmailRequestData.setOtp", "commonauth.entities.notificationSvc.EmailRequestData.setCustomMessage" ],
  "commonauth.util.Utility.isValidEmail" : [ "io.micrometer.common.util.StringUtils.isNotBlank" ],
  "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build" : [ "commonauth.entities.responses.InitAuthResponse.<init>" ],
  "commonauth.clients.CognitoClient.getHeadlessTokenUsingMobileNumber" : [ "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUsername", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setUserPoolId", "com.amazonaws.services.cognitoidp.model.AttributeType.setName", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserAttributes", "commonauth.clients.CognitoClient.adminCreateUser", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "commonauth.clients.CognitoClient.getClientSecret", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setMessageAction", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.<init>", "com.amazonaws.services.cognitoidp.model.AttributeType.setValue", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.<init>", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminInitiateAuth", "commonauth.util.Utility.getSecretHash", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setClientId", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setAuthFlow", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.addAuthParametersEntry" ],
  "commonauth.entities.requests.GetTokenRequest.equals" : [ "commonauth.entities.requests.GetTokenRequest.getIdTokenCookieKey", "commonauth.entities.requests.GetTokenRequest.getAppId", "commonauth.entities.requests.GetTokenRequest.canEqual", "commonauth.entities.requests.GetTokenRequest.getAuthCode" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleInitAuth" : [ "commonauth.entities.db.ServiceApplication.getAuthFlow", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUsername", "com.amazonaws.services.cognitoidp.model.AttributeType.setName", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserAttributes", "commonauth.clients.CognitoClient.adminCreateUser", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.exceptions.InitAuthWrongCredException.<init>", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.clients.CognitoClient.initAuthPasswordLess", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setMessageAction", "commonauth.entities.requests.InitAuthRequest.getAppId", "com.amazonaws.services.cognitoidp.model.AttributeType.setValue", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.<init>", "commonauth.exceptions.CreateUserInvalidParameterException.<init>", "commonauth.clients.CognitoClient.initAuthUsernamePassword", "commonauth.entities.db.ServiceApplication.getUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserPoolId", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.util.G2faUrlBuilder.setName" : [ "org.slf4j.Logger.error" ],
  "commonauth.services.impl.ApplicationServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.clients.CognitoClient.lambda$refreshToken$17" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminInitiateAuth" ],
  "commonauth.entities.requests.OtpVerificationRequest.otpVerificationRequestValidation" : [ "commonauth.exceptions.OtpRequestValidationException.<init>" ],
  "commonauth.services.impl.UserServiceImpl.createAdminEnableUserRequest" : [ "com.amazonaws.services.cognitoidp.model.AdminEnableUserRequest.setUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminEnableUserRequest.<init>", "com.amazonaws.services.cognitoidp.model.AdminEnableUserRequest.setUsername" ],
  "commonauth.entities.requests.InitiateLoginRequest.equals" : [ "commonauth.entities.requests.InitiateLoginRequest.getNotifyUrl", "commonauth.entities.requests.InitiateLoginRequest.getIdentifierType", "commonauth.entities.requests.InitiateLoginRequest.getIdentifierId", "commonauth.entities.requests.InitiateLoginRequest.getLoginTheme", "commonauth.entities.requests.InitiateLoginRequest.canEqual" ],
  "commonauth.clients.impl.TruecallerClientImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.util.G2faUrlBuilder.withSecret" : [ "commonauth.util.G2faUrlBuilder.<init>" ],
  "commonauth.clients.impl.TruecallerClientImpl.<init>" : [ "org.springframework.boot.web.client.RestTemplateBuilder.setReadTimeout", "org.springframework.boot.web.client.RestTemplateBuilder.setConnectTimeout", "org.springframework.boot.web.client.RestTemplateBuilder.build" ],
  "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.values" : [ "[Lcommonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig;.clone" ],
  "commonauth.clients.CognitoClient.lambda$initAuthUsernamePassword$1" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminInitiateAuth" ],
  "commonauth.entities.responses.GenericOperationResponse.hashCode" : [ "commonauth.entities.responses.GenericOperationResponse.isSuccess", "commonauth.entities.responses.GenericOperationResponse.getHttpStatus", "commonauth.entities.responses.GenericOperationResponse.getCode", "commonauth.entities.responses.GenericOperationResponse.getDetail", "commonauth.entities.responses.GenericOperationResponse.getData" ],
  "commonauth.enums.Environment.<clinit>" : [ "commonauth.enums.Environment.<init>", "commonauth.enums.Environment.$values" ],
  "commonauth.controllers.DevController.getCaches" : [ "org.springframework.cache.CacheManager.getCacheNames" ],
  "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.insertAuthCredPair" : [ "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.authCode", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.addedOn", "commonauth.entities.db.AuthcodeTokenPair.builder", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.refreshToken", "commonauth.repository.AuthcodeTokenPairRepository.save", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.token", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.idtoken", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.build" ],
  "commonauth.factory.AWSCognitoIdentityProviderFactory.createAWSCognitoIdentityProviderClient" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClientBuilder.standard", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClientBuilder.withRegion", "com.amazonaws.auth.WebIdentityTokenCredentialsProvider.create", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClientBuilder.withCredentials", "org.slf4j.Logger.info", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClientBuilder.build" ],
  "commonauth.services.impl.PartnersAuthServiceImpl.verifyOtpV2" : [ "org.slf4j.Logger.info" ],
  "commonauth.services.impl.UserServiceImpl.handleUpdatePassword" : [ "commonauth.dao.AuditLogsDAO.saveAuditLog", "com.amazonaws.services.cognitoidp.model.GlobalSignOutRequest.<init>", "commonauth.entities.requests.UpdatePasswordRequest.getOldPassword", "commonauth.entities.requests.UpdatePasswordRequest.getAppId", "com.amazonaws.services.cognitoidp.model.ChangePasswordResult.getSdkHttpMetadata", "commonauth.entities.mongo.AuditLogs.setUserName", "com.amazonaws.services.cognitoidp.model.ChangePasswordRequest.setPreviousPassword", "org.springframework.http.HttpStatus.name", "commonauth.clients.CognitoClient.changePassword", "commonauth.exceptions.GlobalSignOutException.<init>", "commonauth.util.Utility.extractClaim", "commonauth.entities.mongo.AuditLogs.<init>", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "com.amazonaws.services.cognitoidp.model.ChangePasswordRequest.setProposedPassword", "com.amazonaws.services.cognitoidp.model.GlobalSignOutRequest.withAccessToken", "commonauth.entities.responses.UpdatePasswordResponse.<init>", "com.amazonaws.services.cognitoidp.model.ChangePasswordRequest.<init>", "commonauth.clients.CognitoClient.globalSignOut", "commonauth.entities.mongo.AuditLogs.setUserAction", "commonauth.entities.mongo.AuditLogs.setAppId", "commonauth.exceptions.UpdatePasswordException.<init>", "com.amazonaws.http.SdkHttpMetadata.getHttpStatusCode", "com.amazonaws.services.cognitoidp.model.ChangePasswordRequest.setAccessToken", "commonauth.entities.requests.UpdatePasswordRequest.getNewPassword", "commonauth.entities.requests.UpdatePasswordRequest.getAccessToken", "commonauth.constants.Constants$AuditLogUserActions.value" ],
  "commonauth.entities.errorclasses.ErrorDetailV2.equals" : [ "commonauth.entities.errorclasses.ErrorDetailV2.canEqual", "commonauth.entities.errorclasses.ErrorDetailV2.getReason", "commonauth.entities.errorclasses.ErrorDetailV2.getStatus", "commonauth.entities.errorclasses.ErrorDetailV2.getMessage" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$TruecallerNotifyConsentStatusBuilder.build" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.<init>" ],
  "commonauth.clients.CognitoClient.lambda$listUsersWithFilter$16" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.listUsers" ],
  "commonauth.entities.responses.VerifyTokenResponse.builder" : [ "commonauth.entities.responses.VerifyTokenResponse$VerifyTokenResponseBuilder.<init>" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.checkIfUserExists" : [ "commonauth.exceptions.UserNotExistsException.<init>", "io.micrometer.common.util.StringUtils.isNotBlank", "commonauth.clients.CognitoClient.getUser", "io.micrometer.common.util.StringUtils.isBlank", "org.slf4j.Logger.error" ],
  "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.resendOtpRequestValidation" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.enums.OtpChannel.getValText", "commonauth.exceptions.OtpRequestValidationException.<init>" ],
  "commonauth.entities.requests.GetUserProfileRequest.hashCode" : [ "commonauth.entities.requests.GetUserProfileRequest.getToken", "commonauth.entities.requests.GetUserProfileRequest.getUserProfileEndpoint", "commonauth.entities.requests.GetUserProfileRequest.getLoginRequestId" ],
  "commonauth.services.impl.AuthenticationServiceImpl.lambda$handleVerifyToken$0" : [ "com.amazonaws.services.cognitoidp.model.AttributeType.getName", "com.amazonaws.services.cognitoidp.model.AttributeType.getValue" ],
  "commonauth.exceptions.ServiceApplicationNotFoundException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.clients.CognitoClient.adminChangePassword" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.services.impl.UserServiceImpl.handleEnableDisable" : [ "commonauth.entities.responses.EnableDisableUserResponse$EnableDisableUserResponseBuilder.message", "commonauth.entities.mongo.AuditLogs.<init>", "commonauth.entities.mongo.AuditLogs.setOldData", "commonauth.dao.AuditLogsDAO.saveAuditLog", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.clients.CognitoClient.getUser", "commonauth.entities.requests.EnableDisableUserRequest.getAppId", "commonauth.entities.responses.EnableDisableUserResponse$EnableDisableUserResponseBuilder.build", "commonauth.entities.mongo.AuditLogs.setNewData", "commonauth.services.impl.UserServiceImpl.createAdminEnableUserRequest", "commonauth.entities.requests.EnableDisableUserRequest.getUsername", "commonauth.services.impl.UserServiceImpl.createAdminDisableUserRequest", "commonauth.exceptions.InvalidEnableDisbaleActionException.<init>", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.mongo.AuditLogs.setUserName", "commonauth.entities.responses.EnableDisableUserResponse.builder", "commonauth.entities.mongo.AuditLogs.setUserAction", "commonauth.clients.CognitoClient.adminEnableUser", "commonauth.entities.db.ServiceApplication.getUserPoolId", "commonauth.entities.requests.EnableDisableUserRequest.getAction", "commonauth.clients.CognitoClient.adminDisableUser", "commonauth.entities.mongo.AuditLogs.setAppId", "commonauth.constants.Constants$AuditLogUserActions.value" ],
  "commonauth.clients.CognitoClient.initAuthCustomAuth" : [ "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setUserPoolId", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminInitiateAuth", "commonauth.util.Utility.getSecretHash", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setClientId", "commonauth.clients.CognitoClient.getClientSecret", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setAuthFlow", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.<init>", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.addAuthParametersEntry" ],
  "commonauth.controllers.CaptchaVerificationController.verifyCaptcha" : [ "commonauth.services.CaptchaVerificationService.verifyCaptcha", "jakarta.servlet.http.HttpServletRequest.getHeader" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.sendGeneralEmail" : [ "commonauth.util.MaskingUtils.maskEmailList", "commonauth.entities.responses.SendEmailNotificationResponse.setMessage", "commonauth.entities.responses.SendEmailNotificationResponse.<init>", "org.slf4j.Logger.info", "commonauth.entities.responses.SendEmailNotificationResponse.setStatus", "org.slf4j.Logger.error", "commonauth.entities.requests.SendGeneralEmailRequest.getToSet", "org.slf4j.MDC.get", "commonauth.entities.requests.SendGeneralEmailRequest.setRequestId", "org.springframework.web.client.RestTemplate.postForObject", "commonauth.entities.requests.SendGeneralEmailRequest.setSource" ],
  "commonauth.entities.truecaller.TruecallerLoginTheme.toString" : [ "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaTextColor", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginSuffix", "commonauth.entities.truecaller.TruecallerLoginTheme.getPrivacyUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getSkipOption", "commonauth.entities.truecaller.TruecallerLoginTheme.getPartnerName", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaPrefix", "commonauth.entities.truecaller.TruecallerLoginTheme.getTtl", "commonauth.entities.truecaller.TruecallerLoginTheme.getBtnShape", "commonauth.entities.truecaller.TruecallerLoginTheme.getTermsUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getBannerPath", "commonauth.entities.truecaller.TruecallerLoginTheme.getLanguageLocale", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaColor", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginPrefix" ],
  "commonauth.entities.truecaller.TruecallerLoginTheme.equals" : [ "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaTextColor", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginSuffix", "commonauth.entities.truecaller.TruecallerLoginTheme.getPrivacyUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getSkipOption", "commonauth.entities.truecaller.TruecallerLoginTheme.getPartnerName", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaPrefix", "commonauth.entities.truecaller.TruecallerLoginTheme.getTtl", "commonauth.entities.truecaller.TruecallerLoginTheme.getBtnShape", "commonauth.entities.truecaller.TruecallerLoginTheme.getTermsUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getBannerPath", "commonauth.entities.truecaller.TruecallerLoginTheme.getLanguageLocale", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaColor", "commonauth.entities.truecaller.TruecallerLoginTheme.canEqual", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginPrefix" ],
  "commonauth.util.filters.Slf4jMDCFilter.doFilterInternal" : [ "commonauth.util.filters.Slf4jMDCFilter.cleanup", "jakarta.servlet.http.HttpServletResponse.addHeader", "jakarta.servlet.FilterChain.doFilter", "org.slf4j.MDC.put", "commonauth.util.filters.Slf4jMDCFilter.resolveToken" ],
  "commonauth.entities.requests.ReissueTokenRequest.equals" : [ "commonauth.entities.requests.ReissueTokenRequest.getUsername", "commonauth.entities.requests.ReissueTokenRequest.canEqual", "commonauth.entities.requests.ReissueTokenRequest.getEntityType", "commonauth.entities.requests.ReissueTokenRequest.getAuthCode", "commonauth.entities.requests.ReissueTokenRequest.getToken", "commonauth.entities.requests.ReissueTokenRequest.getRefresh", "commonauth.entities.requests.ReissueTokenRequest.getEntityId", "commonauth.entities.requests.ReissueTokenRequest.getAppId" ],
  "commonauth.enums.OtpChannel.<clinit>" : [ "commonauth.enums.OtpChannel.$values", "commonauth.enums.OtpChannel.<init>" ],
  "commonauth.controllers.UserController.enableDisable" : [ "commonauth.services.impl.UserServiceImpl.handleEnableDisable", "org.slf4j.Logger.info" ],
  "commonauth.aspects.ControllerAdvice.onServiceApplicationNotRegisteredException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.clients.impl.ShieldSvcClientImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.clients.CognitoClient.updateUserAttributesWithToken" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.services.impl.TruecallerLoginImpl.handleUserConsent" : [ "commonauth.entities.truecaller.TruecallerCallbackRequest.getRequestId", "com.fasterxml.jackson.databind.ObjectMapper.convertValue", "commonauth.repository.AuthcodeTokenPairRepository.findByAuthCode", "commonauth.repository.AuthcodeTokenPairRepository.save", "org.slf4j.Logger.info", "commonauth.services.impl.TruecallerLoginImpl.notifyLoginStatus", "org.slf4j.Logger.error", "commonauth.services.impl.TruecallerLoginImpl.handleUserConsentStatus" ],
  "commonauth.controllers.UserLoginController.getUserProfile" : [ "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.data", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.build", "commonauth.factory.UserLoginContext.getUserProfile", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.success", "org.slf4j.Logger.info", "commonauth.entities.responses.GenericHTTPResponse.builder", "org.slf4j.Logger.error" ],
  "commonauth.exceptions.OtpDetailNotFoundException.<init>" : [ "commonauth.exceptions.OtpCommonException.<init>" ],
  "commonauth.entities.twoFactorAuthentication.TwoFALoginData.builder" : [ "commonauth.entities.twoFactorAuthentication.TwoFALoginData$TwoFALoginDataBuilder.<init>" ],
  "commonauth.aspects.ControllerAdvice.onExpiredCodeException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build" ],
  "commonauth.entities.mongo.LoginMeta.hashCode" : [ "commonauth.entities.mongo.LoginMeta.getUserId", "commonauth.entities.mongo.LoginMeta.getLatitude", "commonauth.entities.mongo.LoginMeta.getLoginTime", "commonauth.entities.mongo.LoginMeta.getMerchantId", "commonauth.entities.mongo.LoginMeta.getIp", "commonauth.entities.mongo.LoginMeta.getAppId", "commonauth.entities.mongo.LoginMeta.getUserType", "commonauth.entities.mongo.LoginMeta.getUserAgent", "commonauth.entities.mongo.LoginMeta.getCity", "commonauth.entities.mongo.LoginMeta.getDevice", "commonauth.entities.mongo.LoginMeta.getIpMetadata", "commonauth.entities.mongo.LoginMeta.getCountry", "commonauth.entities.mongo.LoginMeta.getClientIp", "commonauth.entities.mongo.LoginMeta.getUsername", "commonauth.entities.mongo.LoginMeta.getProxyType", "commonauth.entities.mongo.LoginMeta.get_id", "commonauth.entities.mongo.LoginMeta.getLongitude", "commonauth.entities.mongo.LoginMeta.getDeviceId", "commonauth.entities.mongo.LoginMeta.getFpEventId" ],
  "commonauth.configurations.UnleashConfiguration.unleashConfig" : [ "no.finn.unleash.util.UnleashConfig.builder", "no.finn.unleash.util.UnleashConfig$Builder.environment", "no.finn.unleash.util.UnleashConfig$Builder.appName", "no.finn.unleash.util.UnleashConfig$Builder.unleashAPI", "no.finn.unleash.util.UnleashConfig$Builder.customHttpHeader", "no.finn.unleash.util.UnleashConfig$Builder.build" ],
  "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.build" : [ "commonauth.entities.responses.GenericErrorResponse.<init>" ],
  "commonauth.entities.truecaller.TruecallerCallbackRequest.equals" : [ "commonauth.entities.truecaller.TruecallerCallbackRequest.getEndpoint", "commonauth.entities.truecaller.TruecallerCallbackRequest.getRequestId", "commonauth.entities.truecaller.TruecallerCallbackRequest.getAccessToken", "commonauth.entities.truecaller.TruecallerCallbackRequest.getStatus", "commonauth.entities.truecaller.TruecallerCallbackRequest.canEqual" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.build" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.<init>" ],
  "commonauth.enums.TokenType.<clinit>" : [ "commonauth.enums.TokenType.<init>", "commonauth.enums.TokenType.$values" ],
  "commonauth.util.filters.CustomHttpServletRequestWrapper.getInputStream" : [ "commonauth.util.filters.CustomHttpServletRequestWrapper$CustomServletInputStream.<init>" ],
  "commonauth.entities.truecaller.TruecallerCallbackRequest.hashCode" : [ "commonauth.entities.truecaller.TruecallerCallbackRequest.getEndpoint", "commonauth.entities.truecaller.TruecallerCallbackRequest.getRequestId", "commonauth.entities.truecaller.TruecallerCallbackRequest.getAccessToken", "commonauth.entities.truecaller.TruecallerCallbackRequest.getStatus" ],
  "commonauth.controllers.AuthController.getTokens" : [ "commonauth.entities.requests.GetTokenRequest.getIdTokenCookieKey", "org.springframework.http.ResponseCookie.toString", "org.springframework.http.ResponseEntity.ok", "commonauth.util.Utility.getTokenAsCookie", "org.slf4j.Logger.info", "commonauth.entities.responses.AuthCodeExchangeResponse.getJwtToken", "org.springframework.http.ResponseEntity$BodyBuilder.header", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.requests.GetTokenRequest.getAppId", "commonauth.services.AuthenticationService.handleGetTokens", "commonauth.entities.responses.AuthCodeExchangeResponse.getTokenFound", "commonauth.entities.responses.AuthCodeExchangeResponse.getJwtIdtoken" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createUserRequestForMobilePasswordLessFlow" : [ "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUsername", "com.amazonaws.services.cognitoidp.model.AttributeType.setName", "commonauth.entities.db.ServiceApplication.getAppId", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserAttributes", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setMessageAction", "com.amazonaws.services.cognitoidp.model.AttributeType.setValue", "commonauth.entities.requests.CreateUserRequest.getUserAttributesMap", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.<init>", "commonauth.entities.db.ServiceApplication.getUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserPoolId", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getAttributesByAppId", "commonauth.util.Utility.getUsernameWithPrefix" ],
  "commonauth.clients.CognitoClient.storeTokensInDB" : [ "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getIdToken", "commonauth.dao.AuthcodeTokenPairDAO.insertAuthCredPair", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.exceptions.AuthCodeTokenPairInsertionException.<init>", "commonauth.util.Utility.getRandomAlphaNumericString", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.sendOtpWhatsApp" : [ "org.springframework.web.reactive.function.client.WebClient.post", "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec.contentType", "org.springframework.web.reactive.function.BodyInserters.fromValue", "org.springframework.web.reactive.function.client.WebClientResponseException.getStatusCode", "org.springframework.http.HttpStatusCode.value", "commonauth.exceptions.HttpClientException.<init>", "commonauth.util.MaskingUtils.maskPhoneNumber", "commonauth.exceptions.NotificationSvcClientException.<init>", "org.slf4j.Logger.error", "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec.body", "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec.retrieve", "commonauth.entities.notificationSvc.WhatsAppRequest.getPhoneNumber", "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec.uri", "reactor.core.publisher.Mono.block", "org.springframework.web.reactive.function.client.WebClient$ResponseSpec.bodyToMono", "commonauth.configurations.CommonauthConfiguration.getNotificationsvcurl", "commonauth.metrics.Metrics.incrementNotificationServiceFailure" ],
  "commonauth.aspects.ControllerAdvice.onUpdatePasswordException" : [ "org.springframework.http.ResponseEntity.badRequest", "commonauth.exceptions.UpdatePasswordException.getMessage", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.responses.UpdatePasswordResponse.<init>", "org.slf4j.Logger.error" ],
  "commonauth.aspects.ControllerAdvice.onOtpRequestValidationException" : [ "org.springframework.http.ResponseEntity.badRequest", "commonauth.exceptions.OtpRequestValidationException.getErrorDetail", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.util.Utility.isValidPhone" : [ "io.micrometer.common.util.StringUtils.isBlank" ],
  "commonauth.entities.requests.ApplicationConfigUpdateRequest.toString" : [ "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAppId", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthPage", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffIncrementFactor", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getInitialBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRetry", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getSuccessRedirectUrl", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpLockDuration", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSize", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getName", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getLogo", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthFlow", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getEmailOtp", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSuccessCooldownPeriod", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getCustomText", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRegion", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxPasswordFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffStrategy", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getFailureRedirectUrl" ],
  "commonauth.services.impl.ValidationServiceImpl.updateCurrentStateVerifyOtp" : [ "commonauth.dao.OtpVerificationDetailsDAO.updateByOtpId", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.entities.db.OtpVerificationDetails.setAttempts" ],
  "commonauth.controllers.ValidationController.verifyOtp" : [ "commonauth.entities.requests.OtpVerificationRequest.otpVerificationRequestValidation", "commonauth.services.ValidationService.handleVerifyOtp" ],
  "commonauth.util.Utility.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.sendOtpToEmail" : [ "org.springframework.web.reactive.function.client.WebClient.create", "org.springframework.web.reactive.function.client.WebClient.post", "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec.contentType", "org.springframework.web.reactive.function.BodyInserters.fromValue", "commonauth.entities.notificationSvc.EmailRequest.setSource", "commonauth.clients.impl.NotificationSvcClientImpl.createEmailRequest", "commonauth.exceptions.NotificationSvcClientException.<init>", "org.slf4j.Logger.error", "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec.body", "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec.retrieve", "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec.uri", "reactor.core.publisher.Mono.block", "org.springframework.web.reactive.function.client.WebClient$ResponseSpec.bodyToMono", "commonauth.configurations.CommonauthConfiguration.getNotificationsvcurl", "commonauth.metrics.Metrics.incrementNotificationServiceFailure", "commonauth.entities.notificationSvc.EmailRequest.setRequestId" ],
  "commonauth.aspects.ControllerAdvice.onAuthCodeInvalidException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.TruecallerLoginImpl.getAuthTokenFromIdP" : [ "commonauth.clients.CognitoClient.getHeadlessTokenUsingMobileNumber", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "commonauth.exceptions.TruecallerLoginFlowException.<init>", "commonauth.entities.requests.GetUserProfileResponse.getPhoneNumber", "commonauth.entities.responses.AuthCodeExchangeResponse.<init>", "commonauth.util.MaskingUtils.maskPhoneNumber", "org.slf4j.Logger.info", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getIdToken", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getExpiresIn", "commonauth.services.impl.TruecallerLoginImpl.formatPhoneNumber", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.entities.responses.SendEmailNotificationResponse.equals" : [ "commonauth.entities.responses.SendEmailNotificationResponse.getStatus", "commonauth.entities.responses.SendEmailNotificationResponse.canEqual", "commonauth.entities.responses.SendEmailNotificationResponse.getMessage" ],
  "commonauth.entities.requests.CreateUserRequest.toString" : [ "commonauth.util.MaskingUtils.maskUserName", "commonauth.util.MaskingUtils.maskUserAttributes" ],
  "commonauth.entities.requests.GetUserProfileRequest.equals" : [ "commonauth.entities.requests.GetUserProfileRequest.canEqual", "commonauth.entities.requests.GetUserProfileRequest.getToken", "commonauth.entities.requests.GetUserProfileRequest.getUserProfileEndpoint", "commonauth.entities.requests.GetUserProfileRequest.getLoginRequestId" ],
  "commonauth.services.impl.UserServiceImpl.handleConfirmForgotPass" : [ "commonauth.exceptions.ConfirmForgotPassException.<init>", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.withUserPoolId", "commonauth.clients.CognitoClient.getClientId", "commonauth.entities.responses.ConfirmForgotPassResponse$ConfirmForgotPassResponseBuilder.message", "commonauth.entities.requests.ConfirmForgotPassRequest.getUsername", "commonauth.services.impl.UserServiceImpl.createConfirmForgotPasswordRequest", "commonauth.entities.responses.ConfirmForgotPassResponse.builder", "commonauth.entities.responses.ConfirmForgotPassResponse$ConfirmForgotPassResponseBuilder.build", "commonauth.clients.CognitoClient.getClientSecret", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.requests.ConfirmForgotPassRequest.getAppId", "commonauth.clients.CognitoClient.globalSignOutWithUserName", "commonauth.entities.requests.ConfirmForgotPassRequest.getNewPassword", "commonauth.entities.requests.ConfirmForgotPassRequest.getCode", "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordResult.getSdkHttpMetadata", "commonauth.clients.CognitoClient.confirmForgotPassword", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.withUsername", "commonauth.exceptions.GlobalSignOutException.<init>", "commonauth.util.Utility.getSecretHash", "com.amazonaws.http.SdkHttpMetadata.getHttpStatusCode", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.<init>", "commonauth.clients.CognitoClient.getUserPoolId" ],
  "commonauth.services.impl.ApplicationServiceImpl.addOrUpdateApplicationConfig" : [ "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAppId", "commonauth.entities.db.ServiceApplication.<init>", "commonauth.services.impl.ApplicationServiceImpl.mapToServiceApplication", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.build", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.success", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.detail", "commonauth.entities.responses.GenericOperationResponse.builder", "org.slf4j.Logger.info", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.code", "commonauth.dao.ServiceApplicationDAO.upsertApplication" ],
  "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.builder" : [ "commonauth.entities.twoFactorAuthentication.Merchant2FAContext$Merchant2FAContextBuilder.<init>" ],
  "commonauth.entities.responses.UpdatePasswordResponse.<init>" : [ "commonauth.entities.responses.GenericOperationResponse.<init>" ],
  "commonauth.entities.requests.SendGeneralEmailRequest.toString" : [ "commonauth.entities.requests.SendGeneralEmailRequest.getSource", "commonauth.entities.requests.SendGeneralEmailRequest.getRequestId", "commonauth.entities.requests.SendGeneralEmailRequest.getData", "commonauth.entities.requests.SendGeneralEmailRequest.getReplyTo", "commonauth.entities.requests.SendGeneralEmailRequest.getToSet", "commonauth.entities.requests.SendGeneralEmailRequest.getTemplate" ],
  "commonauth.clients.CognitoClient.initAuthUsernamePassword" : [ "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setUserPoolId", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.entities.db.ServiceApplication.getAppId", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "commonauth.clients.CognitoClient.getClientSecret", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authCode", "commonauth.clients.CognitoClient.storeTokensInDB", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.adminInitiateAuthResult", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.isAuth", "commonauth.entities.responses.InitAuthResponse.setRefreshToken", "commonauth.util.Utility.getSecretHash", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setAuthFlow", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.addAuthParametersEntry", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.redirectUrl", "commonauth.entities.responses.InitAuthResponse.setAccessToken", "commonauth.entities.requests.InitAuthRequest.getPassword", "commonauth.entities.responses.InitAuthResponse.builder", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getChallengeName", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.<init>", "commonauth.util.MetricsUtil.executeWithMetrics", "commonauth.entities.db.ServiceApplication.getSuccessRedirectUrl", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.entities.db.ServiceApplication.getUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setClientId", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authenticationFailed", "commonauth.entities.requests.InitAuthRequest.getUsername", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.exceptions.IncorrectOtpException.<init>" : [ "commonauth.exceptions.CommonAuthDefaultException.<init>" ],
  "commonauth.clients.impl.GoogleAuthClientImpl.validateIdToken" : [ "com.auth0.jwt.exceptions.JWTVerificationException.<init>", "com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier.verify", "org.slf4j.Logger.error" ],
  "commonauth.controllers.AuthController.reissueToken" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.services.AuthenticationService.handleReissueToken", "commonauth.entities.requests.ReissueTokenRequest.getUsername", "commonauth.util.MaskingUtils.maskUserName", "org.springframework.http.ResponseEntity.ok", "org.slf4j.Logger.info", "commonauth.entities.requests.ReissueTokenRequest.getAppId" ],
  "commonauth.configurations.StreamMetricsConfiguration.getCognitoClient" : [ "commonauth.factory.AWSCognitoIdentityProviderFactory.createAWSCognitoIdentityProviderClient", "commonauth.clients.CognitoClient.<init>" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.set2faPrefs" : [ "commonauth.util.CDBUtils.getUsername", "commonauth.util.CDBUtils.getUserAttributes", "org.slf4j.Logger.info", "commonauth.entities.requests.InitAuthRequest.getMerchant2FAPrefs" ],
  "commonauth.entities.requests.SendGeneralEmailRequest.<init>" : [ "commonauth.entities.requests.SendGeneralEmailRequest$1.<init>" ],
  "commonauth.clients.impl.ReCaptchaClientImpl.getRecaptchaHeaders" : [ "org.springframework.http.HttpHeaders.<init>", "org.springframework.http.HttpHeaders.setAccept", "org.springframework.http.HttpHeaders.setContentType" ],
  "commonauth.exceptions.CommonAuthGenericException.<init>" : [ "commonauth.entities.errorclasses.ErrorDetailV2.setMessage", "commonauth.entities.errorclasses.ErrorDetailV2.setReason", "commonauth.entities.errorclasses.ErrorDetailV2.<init>", "commonauth.entities.errorclasses.ErrorDetailV2.setStatus" ],
  "commonauth.exceptions.OtpVerificationWindowExpiredException.<init>" : [ "commonauth.exceptions.CommonAuthDefaultException.<init>" ],
  "commonauth.entities.responses.RegionProxyData.equals" : [ "commonauth.entities.responses.RegionProxyData.getProxyTypeRiskScore", "commonauth.entities.responses.RegionProxyData.canEqual", "commonauth.entities.responses.RegionProxyData.getRegion", "commonauth.entities.responses.RegionProxyData.getCityRiskScore", "commonauth.entities.responses.RegionProxyData.getCountryCode", "commonauth.entities.responses.RegionProxyData.getCity", "commonauth.entities.responses.RegionProxyData.getCountryName", "commonauth.entities.responses.RegionProxyData.getProxyType" ],
  "commonauth.util.Utility.getTokenAsCookie" : [ "org.springframework.boot.web.server.Cookie$SameSite.name", "org.springframework.http.ResponseCookie$ResponseCookieBuilder.sameSite", "org.springframework.http.ResponseCookie$ResponseCookieBuilder.secure", "org.springframework.http.ResponseCookie$ResponseCookieBuilder.httpOnly", "org.springframework.http.ResponseCookie$ResponseCookieBuilder.domain", "commonauth.enums.Environment.name", "org.springframework.http.ResponseCookie.from", "org.springframework.http.ResponseCookie$ResponseCookieBuilder.build", "org.springframework.http.ResponseCookie$ResponseCookieBuilder.path" ],
  "commonauth.entities.requests.GetTokenRequest.hashCode" : [ "commonauth.entities.requests.GetTokenRequest.getIdTokenCookieKey", "commonauth.entities.requests.GetTokenRequest.getAppId", "commonauth.entities.requests.GetTokenRequest.getAuthCode" ],
  "commonauth.entities.mongo.AuditLogs.hashCode" : [ "commonauth.entities.mongo.AuditLogs.getUserName", "commonauth.entities.mongo.AuditLogs.getAppId", "commonauth.entities.mongo.AuditLogs.getDeviceType", "commonauth.entities.mongo.AuditLogs.getNewData", "commonauth.entities.mongo.AuditLogs.getAddedOn", "commonauth.entities.mongo.AuditLogs.getUserAction", "commonauth.entities.mongo.AuditLogs.getOldData", "commonauth.entities.mongo.AuditLogs.getDeviceId", "commonauth.entities.mongo.AuditLogs.get_id", "commonauth.entities.mongo.AuditLogs.getAddedBy" ],
  "commonauth.util.filters.Slf4jMDCFilterConfig.servletRegistrationBean" : [ "org.springframework.boot.web.servlet.FilterRegistrationBean.<init>", "commonauth.util.filters.Slf4jMDCFilter.<init>", "org.springframework.boot.web.servlet.FilterRegistrationBean.setOrder", "org.springframework.boot.web.servlet.FilterRegistrationBean.setFilter" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleInitAuthCMS" : [ "commonauth.entities.db.ServiceApplication.getAppId", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.message", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.build", "commonauth.clients.CognitoClient.initAuthPasswordLess", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.clients.CognitoClient.initAuthNoAuthRequired", "commonauth.services.impl.AuthenticationServiceImpl.getAdminCreateUserRequestWithMobileNo", "org.apache.commons.lang3.StringUtils.isEmpty", "commonauth.repository.UserLoginRepository.findByAppIdAndUsername", "commonauth.entities.responses.InitAuthResponse$ErrorData.builder", "commonauth.entities.db.UserLogin.setIsLocked", "commonauth.clients.CognitoClient.adminCreateUser", "commonauth.clients.impl.GoogleAuthClientImpl.validateGoogleIdTokenAndExtractEmail", "com.amazonaws.services.cognitoidp.model.UserNotFoundException.getMessage", "commonauth.entities.responses.InitAuthResponse.getAuthCode", "commonauth.entities.db.UserLogin.setLockUntil", "commonauth.entities.responses.InitAuthResponse.builder", "org.apache.commons.lang3.ArrayUtils.contains", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.exceptions.InvalidRequestException.<init>", "commonauth.entities.requests.InitAuthRequest.setUsername", "commonauth.services.impl.AuthenticationServiceImpl.handleFailedLogin", "commonauth.exceptions.CreateUserInvalidParameterException.<init>", "commonauth.clients.CognitoClient.initAuthUsernamePassword", "commonauth.util.MaskingUtils.maskUserName", "commonauth.entities.responses.InitAuthResponse.<init>", "commonauth.entities.db.ServiceApplication.getUserPoolId", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.message", "commonauth.entities.db.ServiceApplication.getAuthFlow", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.repository.UserLoginRepository.deleteByAppIdAndUsername", "commonauth.repository.UserLoginRepository.save", "commonauth.entities.requests.InitAuthRequest.getGoogleIdToken", "org.slf4j.Logger.error", "commonauth.entities.db.UserLogin.getIsLocked", "commonauth.entities.db.UserLogin.getLockUntil", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.loginAttemptsLeft", "org.apache.commons.lang3.StringUtils.isNotEmpty", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.isAuth", "org.springframework.http.HttpStatus.value", "commonauth.entities.responses.InitAuthResponse$ErrorData.getMessage", "commonauth.entities.requests.InitAuthRequest.getAuthFlowType", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.statusCode", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.errorData", "commonauth.entities.db.UserLogin.setFailedLoginCount", "com.auth0.jwt.exceptions.JWTVerificationException.getMessage", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authenticationFailed", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.lockedForMinutes", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.controllers.DevController.testRedis" : [ "org.springframework.data.redis.core.ValueOperations.set", "org.springframework.data.redis.core.RedisTemplate.opsForValue", "org.springframework.data.redis.core.ValueOperations.get" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createUserRequestForEmailPasswordLessFlow" : [ "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUsername", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.<init>", "com.amazonaws.services.cognitoidp.model.AttributeType.setName", "commonauth.entities.db.ServiceApplication.getAppId", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserAttributes", "commonauth.entities.db.ServiceApplication.getUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserPoolId", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getAttributesByAppId", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setMessageAction", "com.amazonaws.services.cognitoidp.model.AttributeType.setValue", "commonauth.entities.requests.CreateUserRequest.getUserAttributesMap" ],
  "commonauth.services.impl.ValidationServiceImpl.isOtpAccountLocked" : [ "commonauth.exceptions.TemporaryBlockedException.<init>", "commonauth.entities.db.OtpVerificationDetails.getUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.getOtpVerificationStatus", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.util.G2faUrlBuilder.withName" : [ "org.slf4j.Logger.error" ],
  "commonauth.services.impl.TruecallerLoginImpl.getValidAuthCodeTokenPair" : [ "commonauth.exceptions.TruecallerLoginFlowException.<init>", "org.apache.logging.log4j.util.Strings.isBlank", "commonauth.repository.AuthcodeTokenPairRepository.findByAuthCode", "commonauth.entities.db.AuthcodeTokenPair.getToken" ],
  "commonauth.enums.BlockedReason.<clinit>" : [ "commonauth.enums.BlockedReason.$values", "commonauth.enums.BlockedReason.<init>" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.findByKeyName" : [ "commonauth.repository.OtpVerificationDetailsRepository.findById", "commonauth.repository.OtpVerificationDetailsRepository.findByOtpChannelVal" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getAccessTokenForUser" : [ "commonauth.exceptions.CommonAuthServerException.<init>", "commonauth.clients.CognitoClient.initAuthCustomAuth", "commonauth.exceptions.UserNotAuthorizedException.<init>", "com.amazonaws.services.cognitoidp.model.NotAuthorizedException.getMessage", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.services.impl.TruecallerLoginImpl.getUserProfileResponseFromTruecallerResponse" : [ "commonauth.entities.requests.GetUserProfileResponse.<init>", "com.amazonaws.util.CollectionUtils.isNullOrEmpty", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getOnlineIdentities", "commonauth.entities.requests.GetUserProfileResponse.setEmail", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getLastName", "commonauth.entities.requests.GetUserProfileResponse.setMetadata", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getName", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getFirstName", "commonauth.entities.requests.GetUserProfileResponse.setPhoneNumber", "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.getEmail", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getPhoneNumbers", "commonauth.entities.requests.GetUserProfileResponse.setName" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleInitAuthPartners" : [ "commonauth.entities.db.ServiceApplication.getAuthFlow", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.repository.UserLoginRepository.deleteByAppIdAndUsername", "commonauth.entities.db.ServiceApplication.getAppId", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.message", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.exceptions.BadRequestException.<init>", "commonauth.repository.UserLoginRepository.save", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.build", "org.slf4j.Logger.error", "commonauth.entities.db.UserLogin.getIsLocked", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.entities.db.UserLogin.getLockUntil", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.loginAttemptsLeft", "org.apache.commons.lang3.StringUtils.isNotEmpty", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.isAuth", "org.springframework.http.HttpStatus.value", "commonauth.entities.responses.InitAuthResponse$ErrorData.getMessage", "org.apache.commons.lang3.StringUtils.isEmpty", "commonauth.entities.requests.InitAuthRequest.getAuthFlowType", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.statusCode", "commonauth.repository.UserLoginRepository.findByAppIdAndUsername", "commonauth.entities.responses.InitAuthResponse$ErrorData.builder", "commonauth.entities.db.UserLogin.setIsLocked", "com.amazonaws.services.cognitoidp.model.UserNotFoundException.getMessage", "commonauth.entities.responses.InitAuthResponse.getAuthCode", "commonauth.entities.db.UserLogin.setLockUntil", "commonauth.entities.responses.InitAuthResponse.builder", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.errorData", "org.apache.commons.lang3.ArrayUtils.contains", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.db.UserLogin.setFailedLoginCount", "commonauth.exceptions.InvalidRequestException.<init>", "commonauth.services.impl.AuthenticationServiceImpl.handleFailedLogin", "commonauth.clients.CognitoClient.initAuthUsernamePassword", "commonauth.util.MaskingUtils.maskUserName", "com.auth0.jwt.exceptions.JWTVerificationException.getMessage", "commonauth.entities.responses.InitAuthResponse.<init>", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.message", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authenticationFailed", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.lockedForMinutes", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.util.CDBUtils.getUpdatedKnownDevices" : [ "commonauth.util.CDBUtils.parseKnownDevices", "org.apache.logging.log4j.util.Strings.isBlank", "commonauth.util.CDBUtils$KnownDevice.length", "org.apache.logging.log4j.util.Strings.isNotBlank" ],
  "commonauth.services.impl.AuthenticationServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.util.Utility.generateRandom" : [ "commonauth.enums.Environment.val", "commonauth.util.Utility.generateMockOtp" ],
  "commonauth.entities.mongo.LoginMeta.equals" : [ "commonauth.entities.mongo.LoginMeta.getUserId", "commonauth.entities.mongo.LoginMeta.getLatitude", "commonauth.entities.mongo.LoginMeta.getLoginTime", "commonauth.entities.mongo.LoginMeta.canEqual", "commonauth.entities.mongo.LoginMeta.getMerchantId", "commonauth.entities.mongo.LoginMeta.getIp", "commonauth.entities.mongo.LoginMeta.getAppId", "commonauth.entities.mongo.LoginMeta.getUserType", "commonauth.entities.mongo.LoginMeta.getUserAgent", "commonauth.entities.mongo.LoginMeta.getCity", "commonauth.entities.mongo.LoginMeta.getDevice", "commonauth.entities.mongo.LoginMeta.getIpMetadata", "commonauth.entities.mongo.LoginMeta.getCountry", "commonauth.entities.mongo.LoginMeta.getClientIp", "commonauth.entities.mongo.LoginMeta.getUsername", "commonauth.entities.mongo.LoginMeta.getProxyType", "commonauth.entities.mongo.LoginMeta.get_id", "commonauth.entities.mongo.LoginMeta.getLongitude", "commonauth.entities.mongo.LoginMeta.getDeviceId", "commonauth.entities.mongo.LoginMeta.getFpEventId" ],
  "commonauth.aspects.ControllerAdvice.onSecretHashCalculationException" : [ "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build" ],
  "commonauth.entities.responses.ConfirmForgotPassResponse.builder" : [ "commonauth.entities.responses.ConfirmForgotPassResponse$ConfirmForgotPassResponseBuilder.<init>" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.createEmailRequest" : [ "commonauth.clients.impl.NotificationSvcClientImpl.createEmailRequestData", "commonauth.entities.notificationSvc.EmailRequest.setTemplate", "commonauth.entities.notificationSvc.EmailRequest.<init>", "commonauth.entities.notificationSvc.EmailRequest.setEmailRequestData", "commonauth.entities.notificationSvc.EmailRequest.setReceiver", "commonauth.entities.notificationSvc.EmailRequest.setReplyTo" ],
  "commonauth.services.impl.OtpValidationServiceImpl.storeTokensInDB" : [ "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getIdToken", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.insertAuthCredPair", "commonauth.exceptions.AuthCodeTokenPairInsertionException.<init>", "commonauth.util.Utility.getRandomAlphaNumericString", "org.slf4j.Logger.info", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.controllers.UserController.updateUser" : [ "commonauth.services.impl.UserServiceImpl.handleUpdateUser", "org.slf4j.Logger.info" ],
  "commonauth.aspects.ControllerAdvice.onUserAlreadyExists" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.UserAlreadyExistsException.getErrorDetail" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.get2FAChannelBasedOnEnv" : [ "commonauth.util.Utility.getCognitoChannelTypeKey" ],
  "commonauth.exceptions.OTPValidationFlowException.<init>" : [ "org.springframework.http.HttpStatusCode.value", "commonauth.exceptions.CommonAuthDefaultException.<init>" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.hashCode" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.getAdditionalInfo", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.getUserProfile" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.generateOtpRequestV2Validation" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.handlePhoneValidation", "commonauth.enums.OtpChannel.getValText", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.handleEmailValidation", "commonauth.util.Utility.getRandomRequestId", "commonauth.exceptions.OtpRequestValidationException.<init>", "org.apache.commons.lang3.StringUtils.isEmpty" ],
  "commonauth.services.impl.UserServiceImpl.handleDeleteUser" : [ "commonauth.entities.responses.EnableDisableUserResponse$EnableDisableUserResponseBuilder.message", "commonauth.entities.mongo.AuditLogs.<init>", "com.amazonaws.services.cognitoidp.model.AdminDeleteUserRequest.withUserPoolId", "commonauth.dao.AuditLogsDAO.saveAuditLog", "commonauth.clients.CognitoClient.adminDeleteUser", "commonauth.entities.requests.DeleteUserRequest.getUsername", "commonauth.entities.responses.EnableDisableUserResponse$EnableDisableUserResponseBuilder.build", "com.amazonaws.services.cognitoidp.model.AdminDeleteUserRequest.<init>", "commonauth.entities.requests.DeleteUserRequest.getAppId", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.mongo.AuditLogs.setUserName", "commonauth.entities.responses.EnableDisableUserResponse.builder", "commonauth.entities.mongo.AuditLogs.setUserAction", "commonauth.entities.mongo.AuditLogs.setAppId", "commonauth.clients.CognitoClient.getUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminDeleteUserRequest.withUsername", "commonauth.constants.Constants$AuditLogUserActions.value" ],
  "commonauth.entities.responses.GenericOperationResponse.toString" : [ "commonauth.entities.responses.GenericOperationResponse.isSuccess", "commonauth.entities.responses.GenericOperationResponse.getHttpStatus", "commonauth.entities.responses.GenericOperationResponse.getCode", "commonauth.entities.responses.GenericOperationResponse.getDetail", "commonauth.entities.responses.GenericOperationResponse.getData" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.toString" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getLastName", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getFirstName" ],
  "commonauth.enums.IdentityProvider.values" : [ "[Lcommonauth.enums.IdentityProvider;.clone" ],
  "commonauth.util.filters.DatadogTaggingFilter.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.responses.RespondToAuthResponse.builder" : [ "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.<init>" ],
  "commonauth.aspects.ControllerAdvice.onInvalidOtp" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.exceptions.OtpValidationException.getErrorDetail", "org.springframework.http.ResponseEntity.status" ],
  "commonauth.services.impl.AuthenticationServiceImpl.<init>" : [ "com.fasterxml.jackson.databind.ObjectMapper.<init>" ],
  "commonauth.services.impl.PartnersAuthServiceImpl.resendOtp" : [ "org.slf4j.Logger.info" ],
  "commonauth.factory.UserLoginContext.getAuthToken" : [ "commonauth.factory.UserLoginStrategy.getAuthToken", "commonauth.factory.UserLoginContext.getUserLoginStrategy" ],
  "commonauth.aspects.ControllerAdvice.onInvalidRequestException" : [ "commonauth.exceptions.InvalidRequestException.getMessage", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity.unprocessableEntity" ],
  "commonauth.token.AwsCognitoRSAKeyProvider.getPublicKeyById" : [ "com.auth0.jwk.JwkProvider.get", "commonauth.token.AwsCognitoRSAKeyProvider.getPublicKeyById", "com.auth0.jwk.Jwk.getPublicKey", "org.slf4j.Logger.error" ],
  "commonauth.entities.responses.UpdateAuthSessionMetaResponse$UpdateAuthSessionMetaResponseBuilder.build" : [ "commonauth.entities.responses.UpdateAuthSessionMetaResponse.<init>" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.updateByOtpId" : [ "commonauth.repository.OtpVerificationDetailsRepository.save" ],
  "commonauth.entities.twoFactorAuthentication.TwoFALoginData.equals" : [ "commonauth.entities.twoFactorAuthentication.TwoFALoginData.getChannel", "commonauth.entities.twoFactorAuthentication.TwoFALoginData.getChannelValue", "commonauth.entities.twoFactorAuthentication.TwoFALoginData.canEqual" ],
  "commonauth.controllers.ValidationController.generateOtpV2" : [ "commonauth.services.ValidationService.generateOtpV2", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setStatus", "commonauth.entities.errorclasses.OTPErrorDetail.getTitle", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.<init>", "commonauth.entities.errorclasses.OTPErrorDetail.getStatus", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.generateOtpRequestV2Validation", "org.springframework.http.HttpStatus.value", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.exceptions.HttpClientException.getOtpErrorDetail", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setMessage", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setTitle" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.equals" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getSecondary2FAChannels", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getChannel", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getChannelValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getLockId", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getOtpValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.canEqual", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getAppId", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getRequestId" ],
  "commonauth.entities.mongo.BlockedOperations.toString" : [ "commonauth.entities.mongo.BlockedOperations.getUserType", "commonauth.entities.mongo.BlockedOperations.getCreatedAt", "commonauth.entities.mongo.BlockedOperations.getEmail", "commonauth.entities.mongo.BlockedOperations.getMerchantId", "commonauth.entities.mongo.BlockedOperations.getProxyType", "commonauth.entities.mongo.BlockedOperations.getUsername", "commonauth.entities.mongo.BlockedOperations.getUserAction", "commonauth.entities.mongo.BlockedOperations.getRequestBody", "commonauth.entities.mongo.BlockedOperations.getDeviceId", "commonauth.entities.mongo.BlockedOperations.getAliasId", "commonauth.entities.mongo.BlockedOperations.getReason", "commonauth.entities.mongo.BlockedOperations.getAccountAlias", "commonauth.entities.mongo.BlockedOperations.getIp", "commonauth.entities.mongo.BlockedOperations.getCountry", "commonauth.entities.mongo.BlockedOperations.get_id" ],
  "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.lambda$findByAuthCode$0" : [ "com.amazonaws.services.cognitoidp.model.ResourceNotFoundException.<init>" ],
  "commonauth.clients.CognitoClient.changePassword" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.clients.CognitoClient.adminEnableUser" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.services.impl.AuthenticationServiceImpl.getAdminCreateUserRequestWithMobileNo" : [ "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUsername", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.<init>", "com.amazonaws.services.cognitoidp.model.AttributeType.setName", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserAttributes", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setUserPoolId", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.setMessageAction", "com.amazonaws.services.cognitoidp.model.AttributeType.setValue" ],
  "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.readAndDeleteToken" : [ "commonauth.repository.AuthcodeTokenPairRepository.delete", "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.findByAuthCode" ],
  "commonauth.entities.mongo.BlockedOperations.equals" : [ "commonauth.entities.mongo.BlockedOperations.getUserType", "commonauth.entities.mongo.BlockedOperations.getCreatedAt", "commonauth.entities.mongo.BlockedOperations.getEmail", "commonauth.entities.mongo.BlockedOperations.canEqual", "commonauth.entities.mongo.BlockedOperations.getMerchantId", "commonauth.entities.mongo.BlockedOperations.getProxyType", "commonauth.entities.mongo.BlockedOperations.getUsername", "commonauth.entities.mongo.BlockedOperations.getUserAction", "commonauth.entities.mongo.BlockedOperations.getRequestBody", "commonauth.entities.mongo.BlockedOperations.getDeviceId", "commonauth.entities.mongo.BlockedOperations.getAliasId", "commonauth.entities.mongo.BlockedOperations.getReason", "commonauth.entities.mongo.BlockedOperations.getAccountAlias", "commonauth.entities.mongo.BlockedOperations.getIp", "commonauth.entities.mongo.BlockedOperations.getCountry", "commonauth.entities.mongo.BlockedOperations.get_id" ],
  "commonauth.metrics.Metrics.incrementCognitoServerError" : [ "io.micrometer.core.instrument.MeterRegistry.counter", "io.micrometer.core.instrument.Counter.increment" ],
  "commonauth.util.Utility.userAttributesMapToList" : [ "com.amazonaws.services.cognitoidp.model.AttributeType.withName", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "org.apache.logging.log4j.util.Strings.isNotBlank", "com.amazonaws.services.cognitoidp.model.AttributeType.withValue" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.blockBlackListedCountrySignin" : [ "commonauth.entities.mongo.BlockedOperations.setReason", "commonauth.util.CDBUtils.saveBlockedOperation", "commonauth.entities.mongo.BlockedOperations.<init>", "commonauth.entities.mongo.BlockedOperations.setUserType", "commonauth.entities.mongo.BlockedOperations.setUserAction", "commonauth.exceptions.GenericException.<init>", "commonauth.entities.mongo.BlockedOperations.setMerchantId", "commonauth.entities.mongo.BlockedOperations.setCreatedAt", "commonauth.entities.mongo.BlockedOperations.setAliasId", "commonauth.entities.mongo.BlockedOperations.setEmail", "commonauth.entities.mongo.BlockedOperations.setIp" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.toString" : [ "commonauth.util.MaskingUtils.maskChannelValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.secondary2FAChannelsToString" ],
  "commonauth.clients.CognitoClient.adminCreateUser" : [ "commonauth.util.MetricsUtil.executeWithMetrics", "org.slf4j.Logger.info" ],
  "commonauth.entities.responses.InitAuthResponse$ErrorData.builder" : [ "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.<init>" ],
  "commonauth.factory.UserLoginContext.handleUserConsent" : [ "commonauth.factory.UserLoginContext.getUserLoginStrategy", "commonauth.factory.UserLoginStrategy.handleUserConsent" ],
  "commonauth.entities.responses.GenericOperationResponse.builder" : [ "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.<init>" ],
  "commonauth.controllers.AuthController.respondToAuth" : [ "commonauth.services.AuthenticationService.handleRespondToAuth", "commonauth.entities.requests.RespondToAuthRequest.getAppId", "commonauth.services.PasswordLessCustomAuthService.respondToCustomAuth", "commonauth.services.impl.OtpValidationServiceImpl.handleRespondToAuth" ],
  "commonauth.clients.CognitoClient.lambda$confirmForgotPassword$12" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.confirmForgotPassword" ],
  "commonauth.util.filters.FilterConfig.usernameProcessingFilter" : [ "org.springframework.boot.web.servlet.FilterRegistrationBean.<init>", "org.springframework.boot.web.servlet.FilterRegistrationBean.setOrder", "org.springframework.boot.web.servlet.FilterRegistrationBean.setFilter", "org.springframework.boot.web.servlet.FilterRegistrationBean.addUrlPatterns", "commonauth.util.filters.UsernameProcessingFilter.<init>" ],
  "commonauth.constants.ThreadPoolConfig.<clinit>" : [ "commonauth.constants.ThreadPoolConfig.<init>", "commonauth.constants.ThreadPoolConfig.$values" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.builder" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$TruecallerNotifyConsentStatusBuilder.<init>" ],
  "commonauth.services.impl.UserServiceImpl.handleFilterUsers" : [ "commonauth.entities.requests.FilterUsersRequest.getAppId", "com.amazonaws.services.cognitoidp.model.ListUsersRequest.withUserPoolId", "com.amazonaws.services.cognitoidp.model.ListUsersRequest.<init>", "commonauth.clients.CognitoClient.listUsersWithFilter", "commonauth.entities.requests.FilterUsersRequest.getByPassValidation", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.db.ServiceApplication.getUserPoolId", "commonauth.entities.requests.FilterUsersRequest.getFilterString", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "com.amazonaws.services.cognitoidp.model.ListUsersRequest.withFilter", "commonauth.services.impl.UserServiceImpl.getFilterString" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.hashCode" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getSecondary2FAChannels", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getChannel", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getChannelValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getLockId", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getOtpValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getAppId", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getRequestId" ],
  "commonauth.services.impl.TruecallerLoginImpl.getLoginStatus" : [ "commonauth.entities.db.AuthcodeTokenPair.getAddedOn", "commonauth.entities.responses.LoginStatusResponse$LoginStatusResponseBuilder.loginInitiatedAt", "commonauth.entities.responses.LoginStatusResponse.builder", "commonauth.entities.responses.LoginStatusResponse$LoginStatusResponseBuilder.build", "commonauth.exceptions.TruecallerLoginFlowException.<init>", "commonauth.entities.db.AuthcodeTokenPair.getStatus", "commonauth.repository.AuthcodeTokenPairRepository.findByAuthCode", "org.slf4j.Logger.info", "commonauth.entities.responses.LoginStatusResponse$LoginStatusResponseBuilder.loginStatus" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleAuth" : [ "commonauth.entities.db.ServiceApplication.getAuthPage", "commonauth.dao.ServiceApplicationDAO.findById" ],
  "commonauth.aspects.ControllerAdvice.onInvalidChallengeNameException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.entities.requests.OtpVerificationRequest.equals" : [ "commonauth.entities.requests.OtpVerificationRequest.getOtpId", "commonauth.entities.requests.OtpVerificationRequest.canEqual", "commonauth.entities.requests.OtpVerificationRequest.getAppId", "commonauth.entities.requests.OtpVerificationRequest.getOtpValue", "commonauth.entities.requests.OtpVerificationRequest.getChannelValue" ],
  "commonauth.controllers.AuthController.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.equals" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.canEqual", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getUserAttributes", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getTitle", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getAccessToken", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getStatus", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getAuthCode", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getMessage", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getRefreshToken" ],
  "commonauth.clients.CognitoClient.lambda$globalSignOut$4" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.globalSignOut" ],
  "commonauth.entities.responses.UpdateAuthSessionMetaResponse.builder" : [ "commonauth.entities.responses.UpdateAuthSessionMetaResponse$UpdateAuthSessionMetaResponseBuilder.<init>" ],
  "commonauth.services.impl.ValidationServiceImpl.isVerifyOtpFunctionalityAccessible" : [ "commonauth.entities.db.ServiceApplication.getOtpFailedAttempts", "commonauth.entities.db.ServiceApplication.getRetry", "commonauth.entities.db.OtpVerificationDetails.getOtpFailedAttempts", "commonauth.entities.db.OtpVerificationDetails.getUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.getOtpVerificationStatus", "commonauth.entities.db.ServiceApplication.getOtpLockDuration", "commonauth.exceptions.HttpClientException.<init>", "commonauth.entities.db.OtpVerificationDetails.getAttempts", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.clients.impl.LoginStatusNotifierClientImpl.<init>" : [ "org.springframework.boot.web.client.RestTemplateBuilder.setReadTimeout", "org.springframework.boot.web.client.RestTemplateBuilder.setConnectTimeout", "org.springframework.boot.web.client.RestTemplateBuilder.build" ],
  "commonauth.entities.twoFactorAuthentication.Merchant2FAContext$Merchant2FAContextBuilder.build" : [ "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.<init>" ],
  "commonauth.aspects.ControllerAdvice.onUserNotAuthorized" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.UserNotAuthorizedException.getErrorDetail" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.handlePhoneValidation" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.exceptions.HttpClientException.<init>", "commonauth.exceptions.OtpRequestValidationException.<init>" ],
  "commonauth.entities.requests.GetTokenRequest.toString" : [ "commonauth.entities.requests.GetTokenRequest.getIdTokenCookieKey", "commonauth.entities.requests.GetTokenRequest.getAppId", "commonauth.entities.requests.GetTokenRequest.getAuthCode" ],
  "commonauth.clients.CognitoClient.lambda$initAuthPasswordLess$0" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminInitiateAuth" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.storeInRedis" : [ "commonauth.util.CDBUtils.getOtpCacheId", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.springframework.data.redis.core.ValueOperations.set", "commonauth.exceptions.GenericException.<init>", "org.slf4j.Logger.error", "org.springframework.data.redis.core.RedisTemplate.opsForValue" ],
  "commonauth.clients.impl.GoogleAuthClientImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.twoFactorAuthentication.ResendOtpRequest$ResendOtpRequestBuilder.build" : [ "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.<init>" ],
  "commonauth.exceptions.TemporaryBlockedException.<init>" : [ "commonauth.exceptions.CommonAuthDefaultException.<init>" ],
  "commonauth.configurations.UnleashConfiguration.unleash" : [ "no.finn.unleash.DefaultUnleash.<init>" ],
  "commonauth.services.impl.ValidationServiceImpl.isSendOtpRequired" : [ "org.slf4j.Logger.info", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.services.impl.TruecallerLoginImpl.getAuthToken" : [ "commonauth.entities.requests.GetUserProfileRequest.setLoginRequestId", "commonauth.entities.requests.GetTokenRequest.getAppId", "commonauth.entities.requests.GetUserProfileResponse.getPhoneNumber", "commonauth.util.MaskingUtils.maskPhoneNumber", "org.slf4j.Logger.info", "commonauth.entities.requests.GetUserProfileRequest.<init>", "commonauth.services.impl.TruecallerLoginImpl.getUserProfile", "commonauth.services.impl.TruecallerLoginImpl.getAuthTokenFromIdP", "commonauth.entities.requests.GetTokenRequest.getAuthCode" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.validatePassword" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.exceptions.GenericException.<init>" ],
  "commonauth.util.G2faUrlBuilder.build" : [ "commonauth.enums.UserEntityType.getValue", "org.apache.commons.lang3.StringUtils.isBlank" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.findByIdAndOtpChannelVal" : [ "commonauth.repository.OtpVerificationDetailsRepository.findByIdAndOtpChannelVal" ],
  "commonauth.entities.errorclasses.OTPErrorDetail.equals" : [ "commonauth.entities.errorclasses.OTPErrorDetail.getTitle", "commonauth.entities.errorclasses.OTPErrorDetail.getMessage", "commonauth.entities.errorclasses.OTPErrorDetail.getStatus", "commonauth.entities.errorclasses.OTPErrorDetail.canEqual" ],
  "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.build" : [ "commonauth.entities.db.AuthcodeTokenPair.<init>" ],
  "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.toString" : [ "commonauth.util.MaskingUtils.maskChannelValue" ],
  "commonauth.entities.requests.DeleteUserRequest.toString" : [ "commonauth.util.MaskingUtils.maskUserName" ],
  "commonauth.controllers.DevController.lambda$getCaches$1" : [ "com.github.benmanes.caffeine.cache.Cache.estimatedSize", "org.springframework.cache.CacheManager.getCache", "org.springframework.cache.Cache.getNativeCache" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl$1.<clinit>" : [ "commonauth.enums.OtpChannel.values", "commonauth.enums.OtpChannel.ordinal" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.lambda$secondary2FAChannelsToString$0" : [ "commonauth.util.MaskingUtils.maskChannelValue" ],
  "commonauth.util.CDBUtils$KnownDevice.equals" : [ "commonauth.util.CDBUtils$KnownDevice.getDeviceId", "commonauth.util.CDBUtils$KnownDevice.getTimestamp", "commonauth.util.CDBUtils$KnownDevice.canEqual" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.verifyOtpRequestV2Validation" : [ "commonauth.enums.OtpChannel.getValText", "commonauth.exceptions.OtpRequestValidationException.<init>", "io.micrometer.common.util.StringUtils.isBlank" ],
  "commonauth.services.impl.UserServiceImpl.createAdminDisableUserRequest" : [ "com.amazonaws.services.cognitoidp.model.AdminDisableUserRequest.<init>", "com.amazonaws.services.cognitoidp.model.AdminDisableUserRequest.setUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminDisableUserRequest.setUsername" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.checkLoginAccessFromCountry" : [ "commonauth.util.CDBUtils.saveBlockedOperation", "commonauth.entities.mongo.BlockedOperations.<init>", "commonauth.entities.mongo.BlockedOperations.setProxyType", "commonauth.entities.mongo.BlockedOperations.setUserAction", "commonauth.entities.responses.RegionProxyData.getCountryCode", "commonauth.entities.mongo.BlockedOperations.setCreatedAt", "commonauth.entities.responses.RegionProxyData.getCountryName", "commonauth.entities.mongo.BlockedOperations.setEmail", "commonauth.entities.mongo.BlockedOperations.setIp", "commonauth.entities.responses.RegionProxyData.getProxyType", "commonauth.entities.mongo.BlockedOperations.setReason", "commonauth.entities.mongo.BlockedOperations.setUserType", "commonauth.enums.UserAction.getVal", "commonauth.entities.mongo.BlockedOperations.setCountry", "commonauth.exceptions.GenericException.<init>", "commonauth.entities.mongo.BlockedOperations.setMerchantId", "commonauth.entities.mongo.BlockedOperations.setAliasId" ],
  "commonauth.exceptions.OtpDefaultException.<init>" : [ "commonauth.entities.errorclasses.OTPErrorDetail.setMessage", "commonauth.entities.errorclasses.OTPErrorDetail.setStatus", "commonauth.entities.errorclasses.OTPErrorDetail.<init>", "commonauth.entities.errorclasses.OTPErrorDetail.setTitle" ],
  "commonauth.entities.requests.ApplicationConfigUpdateRequest.hashCode" : [ "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAppId", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthPage", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffIncrementFactor", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getInitialBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRetry", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getSuccessRedirectUrl", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpLockDuration", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSize", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getName", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getLogo", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthFlow", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getEmailOtp", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSuccessCooldownPeriod", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getClientId", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getCustomText", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRegion", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxPasswordFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getClientSecret", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffStrategy", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getFailureRedirectUrl", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getUserPoolId" ],
  "commonauth.controllers.ValidationController.validate2fa" : [ "commonauth.services.ValidationService.verifyOtpV2", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.verifyOtpRequestV2Validation", "org.slf4j.Logger.info", "org.slf4j.Logger.error" ],
  "commonauth.util.CDBUtils.trimLockId" : [ "org.apache.commons.lang3.StringUtils.isNotBlank" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.equals" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.getAdditionalInfo", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.canEqual", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.getUserProfile" ],
  "commonauth.controllers.ApplicationController.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.services.impl.ApplicationServiceImpl.mapToServiceApplication" : [ "commonauth.entities.requests.ApplicationConfigUpdateRequest.getInitialBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRetry", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getSuccessRedirectUrl", "commonauth.entities.db.ServiceApplication.setEmailOtp", "commonauth.entities.db.ServiceApplication.setRetry", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSize", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getLogo", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthFlow", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getClientId", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getEmailOtp", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getCustomText", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getRegion", "commonauth.entities.db.ServiceApplication.setSuccessRedirectUrl", "commonauth.entities.db.ServiceApplication.setCustomText", "commonauth.entities.db.ServiceApplication.setFailureRedirectUrl", "commonauth.entities.db.ServiceApplication.setOtpFailedAttempts", "commonauth.entities.db.ServiceApplication.setAuthPage", "commonauth.entities.db.ServiceApplication.setMaxBlockageSec", "commonauth.entities.db.ServiceApplication.setLogo", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxPasswordFailedAttempts", "commonauth.entities.db.ServiceApplication.setId", "commonauth.entities.db.ServiceApplication.setOtpSuccessCooldownPeriod", "commonauth.entities.db.ServiceApplication.setBackOffIncrementFactor", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getUserPoolId", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getAuthPage", "commonauth.entities.db.ServiceApplication.setOtpSize", "commonauth.entities.db.ServiceApplication.setInitialBlockageSec", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffIncrementFactor", "commonauth.entities.db.ServiceApplication.setAppId", "commonauth.entities.db.ServiceApplication.setOtpLockDuration", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpLockDuration", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getName", "commonauth.entities.db.ServiceApplication.setAuthFlow", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getOtpSuccessCooldownPeriod", "commonauth.entities.db.ServiceApplication.setClientId", "commonauth.entities.db.ServiceApplication.setUserPoolId", "commonauth.entities.db.ServiceApplication.setMaxPasswordFailedAttempts", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getMaxBlockageSec", "commonauth.entities.db.ServiceApplication.setClientSecret", "commonauth.entities.db.ServiceApplication.setName", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getClientSecret", "commonauth.entities.db.ServiceApplication.setRegion", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getBackOffStrategy", "commonauth.entities.requests.ApplicationConfigUpdateRequest.getFailureRedirectUrl", "commonauth.entities.db.ServiceApplication.setBackOffStrategy" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleRespondToAuth" : [ "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeRequest.<init>", "commonauth.dao.AuthcodeTokenPairDAO.insertAuthCredPair", "commonauth.entities.db.ServiceApplication.getClientId", "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeRequest.addChallengeResponsesEntry", "com.amazonaws.services.cognitoidp.model.AttributeType.setName", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.authenticationFailed", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.clients.CognitoClient.getClientSecret", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.redirectUrl", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.setUserAttributes", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.setUsername", "commonauth.entities.requests.RespondToAuthRequest.getSession", "com.amazonaws.services.cognitoidp.model.AttributeType.setValue", "commonauth.entities.requests.RespondToAuthRequest.getUsername", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getIdToken", "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeRequest.setChallengeName", "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeRequest.setSession", "commonauth.util.Utility.getSecretHash", "commonauth.exceptions.AuthCodeTokenPairInsertionException.<init>", "commonauth.entities.requests.RespondToAuthRequest.getAnswer", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.<init>", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.isAuth", "commonauth.clients.CognitoClient.getCognitoIdp", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.build", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.respondToAuthChallenge", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.authCode", "commonauth.entities.requests.RespondToAuthRequest.getAppId", "commonauth.entities.requests.RespondToAuthRequest.getChallengeName", "commonauth.util.Utility.getRandomAlphaNumericString", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.respondToAuthChallengeResult", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.setUserPoolId", "commonauth.entities.db.ServiceApplication.getSuccessRedirectUrl", "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeRequest.setClientId", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.entities.db.ServiceApplication.getUserPoolId", "commonauth.exceptions.InvalidChallengeNameException.<init>", "commonauth.exceptions.ParameterMissingOrIllegalException.<init>", "commonauth.entities.responses.RespondToAuthResponse.builder", "commonauth.clients.CognitoClient.updateUserAttributes", "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeResult.getAuthenticationResult" ],
  "commonauth.clients.CognitoClient.lambda$adminCreateUser$6" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser" ],
  "commonauth.controllers.UserController.adminUpdatePassword" : [ "org.slf4j.Logger.info", "commonauth.services.impl.UserServiceImpl.handleAdminUpdatePassword" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getAttributesByAppId" : [ "com.amazonaws.services.cognitoidp.model.AttributeType.withName", "commonauth.util.Utility.isValidEmail", "io.micrometer.common.util.StringUtils.isNotBlank", "commonauth.util.Utility.formatPhoneNumber", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "com.amazonaws.services.cognitoidp.model.AttributeType.withValue", "commonauth.exceptions.CommonAuthBadRequestException.<init>", "commonauth.util.Utility.userAttributesMapToList" ],
  "commonauth.token.AwsCognitoRSAKeyProvider.<init>" : [ "commonauth.exceptions.InvalidCognitoPublicKeyUrlException.<init>", "com.auth0.jwk.JwkProviderBuilder.<init>", "com.auth0.jwk.JwkProviderBuilder.build" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.build" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.<init>" ],
  "commonauth.aspects.ControllerAdvice.onInvalidOtpIdException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.aspects.ControllerAdvice.onBadRequestException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error", "commonauth.exceptions.BadRequestException.getErrorDetail" ],
  "commonauth.services.impl.CaptchaVerificationServiceImpl.verifyCaptcha" : [ "no.finn.unleash.UnleashContext.builder", "commonauth.exceptions.BadRequestException.<init>", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.isSuccess", "no.finn.unleash.UnleashContext$Builder.userId", "no.finn.unleash.Unleash.isEnabled", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.clients.ReCaptchaClient.verifyCaptcha", "no.finn.unleash.UnleashContext$Builder.build", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getHostname", "commonauth.entities.Constants$CaptchaSource.name", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getErrorCodes", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getApkName" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.populateUsername" : [ "commonauth.services.impl.MerchantAuthServiceImpl.getUserAction", "commonauth.entities.requests.InitAuthRequest.setUsername", "commonauth.enums.UserAction.equals", "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.entities.requests.InitAuthRequest.getAccountAlias", "commonauth.util.CDBUtils.getAliasUserName", "commonauth.entities.requests.InitAuthRequest.getEmail", "commonauth.entities.requests.InitAuthRequest.getAliasUserName", "commonauth.exceptions.GenericException.<init>", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.equals" : [ "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getLockId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getOtpCacheId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.isLoginFlow", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.canEqual", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getChannel", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getAppId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getChannelValue" ],
  "commonauth.util.MaskingUtils.maskPhoneNumber" : [ "org.apache.commons.lang3.StringUtils.isBlank" ],
  "commonauth.aspects.ControllerAdvice.onUserNotExists" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.UserNotExistsException.getErrorDetail" ],
  "commonauth.enums.ComponentName.values" : [ "[Lcommonauth.enums.ComponentName;.clone" ],
  "commonauth.clients.CognitoClient.lambda$changePassword$13" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.changePassword" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.insertVerificationDetail" : [ "commonauth.dao.OtpVerificationDetailsDAO.insertOtpWithAddedOn", "commonauth.exceptions.CommonAuthServerException.<init>", "commonauth.enums.OtpChannel.getValText", "org.slf4j.Logger.error", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.services.impl.UserServiceImpl.handleAdminUpdatePassword" : [ "commonauth.dao.AuditLogsDAO.saveAuditLog", "commonauth.entities.requests.AdminUpdatePasswordRequest.getAppId", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withUsername", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.setUsername", "org.slf4j.Logger.error", "commonauth.clients.CognitoClient.globalSignOutWithUserName", "commonauth.entities.mongo.AuditLogs.setUserName", "com.amazonaws.services.cognitoidp.model.InvalidParameterException.getMessage", "commonauth.entities.requests.AdminUpdatePasswordRequest.getUsername", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.detail", "commonauth.entities.mongo.AuditLogs.<init>", "commonauth.clients.CognitoClient.adminChangePassword", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.<init>", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.setUserPoolId", "commonauth.entities.responses.GenericOperationResponse.builder", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withPassword", "commonauth.entities.requests.AdminUpdatePasswordRequest.getPassword", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withUserPoolId", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withPermanent", "commonauth.entities.mongo.AuditLogs.setUserAction", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.build", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.success", "commonauth.exceptions.UpdatePasswordException.<init>", "commonauth.exceptions.GenericException.<init>", "commonauth.entities.mongo.AuditLogs.setAppId", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.<init>", "commonauth.clients.CognitoClient.getUserPoolId", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.code", "commonauth.constants.Constants$AuditLogUserActions.value" ],
  "commonauth.services.impl.OtpValidationServiceImpl.handleRespondToAuth" : [ "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.authenticationFailed", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.exceptions.HttpClientException.<init>", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.build", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.builder", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getAuthCode", "org.slf4j.Logger.error", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.redirectUrl", "commonauth.entities.requests.RespondToAuthRequest.getSession", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.appId", "commonauth.entities.requests.RespondToAuthRequest.getUsername", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.channel", "commonauth.enums.OtpChannel.getValText", "commonauth.entities.requests.RespondToAuthRequest.getAnswer", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.isAuth", "commonauth.entities.db.ServiceApplication.getFailureRedirectUrl", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.build", "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.authCode", "commonauth.entities.requests.RespondToAuthRequest.getAppId", "commonauth.services.impl.OtpValidationServiceImpl.verifyResponse", "commonauth.entities.db.ServiceApplication.getSuccessRedirectUrl", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.channelValue", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.otpValue", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.lockId", "commonauth.entities.responses.RespondToAuthResponse.builder" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.equals" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.canEqual", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getMessage", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getStatus", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getTitle" ],
  "commonauth.services.impl.ValidationServiceImpl.isSendOtpFunctionalityAccessible" : [ "commonauth.exceptions.HttpClientException.<init>" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getCognitoClientByAppId" : [ "commonauth.exceptions.CommonAuthServerException.<init>", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.ValidationServiceImpl.handleVerifyOtp" : [ "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.db.OtpVerificationDetails.getUpdatedOn", "commonauth.exceptions.OtpVerificationWindowExpiredException.<init>", "org.slf4j.Logger.info", "commonauth.entities.responses.OtpVerificationResponse.getStatus", "org.slf4j.Logger.error", "commonauth.entities.responses.OtpVerificationResponse.<init>", "commonauth.entities.db.OtpVerificationDetails.getAttempts", "commonauth.dao.OtpVerificationDetailsDAO.findByIdAndOtpChannelVal", "commonauth.exceptions.TemporaryBlockedException.<init>", "commonauth.entities.responses.OtpVerificationResponse.setStatus", "commonauth.entities.requests.OtpVerificationRequest.getOtpId", "commonauth.entities.requests.OtpVerificationRequest.getAppId", "commonauth.exceptions.InvalidOtpIdException.<init>", "commonauth.services.impl.ValidationServiceImpl.isOtpAccountLocked", "commonauth.services.impl.ValidationServiceImpl.updateCurrentStateVerifyOtp", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.enums.OtpVerificationStatus.getValText", "commonauth.entities.requests.OtpVerificationRequest.getOtpValue", "commonauth.entities.responses.OtpVerificationResponse.setMessage", "commonauth.dao.OtpVerificationDetailsDAO.updateByOtpId", "commonauth.dao.OtpVerificationDetailsDAO.findByKeyName", "commonauth.entities.db.OtpVerificationDetails.setAttempts", "commonauth.entities.requests.OtpVerificationRequest.getChannelValue", "commonauth.entities.responses.OtpVerificationResponse.getMessage", "commonauth.enums.OtpVerificationStatus.equals", "org.apache.commons.codec.digest.DigestUtils.sha256Hex", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.exceptions.OtpDetailNotFoundException.<init>", "commonauth.exceptions.IncorrectOtpException.<init>", "commonauth.entities.db.OtpVerificationDetails.getEncryptedOtpToken", "commonauth.services.impl.ValidationServiceImpl.attemptsLeft" ],
  "commonauth.util.G2FAUtil.isG2FACodeValid" : [ "commonauth.util.G2FAUtil.generateTOTP", "commonauth.util.G2FAUtil.getCurrentInterval", "org.apache.commons.codec.binary.Base32.<init>", "org.apache.commons.codec.binary.Base32.decode" ],
  "commonauth.entities.requests.InitAuthRequest.equals" : [ "commonauth.entities.requests.InitAuthRequest.getLoginMeta", "commonauth.entities.requests.InitAuthRequest.getAuthFlowType", "commonauth.entities.requests.InitAuthRequest.getPassword", "commonauth.entities.requests.InitAuthRequest.is2faMandatory", "commonauth.entities.requests.InitAuthRequest.getEmail", "commonauth.entities.requests.InitAuthRequest.isVerifyEmail", "commonauth.entities.requests.InitAuthRequest.getAliasUserName", "commonauth.entities.requests.InitAuthRequest.getIp", "commonauth.entities.requests.InitAuthRequest.canEqual", "commonauth.entities.requests.InitAuthRequest.isEligibleForForeignCountryCheck", "commonauth.entities.requests.InitAuthRequest.getDeviceId", "commonauth.entities.requests.InitAuthRequest.getPhoneNumber", "commonauth.entities.requests.InitAuthRequest.getGoogleIdToken", "commonauth.entities.requests.InitAuthRequest.getMerchant2FAPrefs", "commonauth.entities.requests.InitAuthRequest.getEntityId", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.entities.requests.InitAuthRequest.getAccountAlias", "commonauth.entities.requests.InitAuthRequest.isForeignCountryLoginAllowed", "commonauth.entities.requests.InitAuthRequest.getEntityType", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.findById" : [ "commonauth.repository.OtpVerificationDetailsRepository.findById" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.notifyAccountLock" : [ "commonauth.entities.requests.SendGeneralEmailRequest.<init>", "commonauth.entities.requests.SendGeneralEmailRequest.setTemplate", "commonauth.clients.impl.NotificationSvcClientImpl.sendGeneralEmail", "commonauth.entities.requests.SendGeneralEmailRequest.getData", "commonauth.util.MaskingUtils.maskEmail", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.entities.requests.SendGeneralEmailRequest.getToSet" ],
  "commonauth.entities.responses.RespondToAuthResponse$RespondToAuthResponseBuilder.build" : [ "commonauth.entities.responses.RespondToAuthResponse.<init>" ],
  "commonauth.controllers.UserController.forgotpassword" : [ "commonauth.services.impl.UserServiceImpl.handleForgotPassword" ],
  "commonauth.controllers.UserLoginController.getLoginStatus" : [ "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.data", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.build", "commonauth.factory.UserLoginContext.getLoginStatus", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.success", "org.slf4j.Logger.info", "commonauth.entities.responses.GenericHTTPResponse.builder", "org.slf4j.Logger.error" ],
  "commonauth.entities.responses.GenericHTTPResponse.builder" : [ "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.<init>" ],
  "commonauth.services.impl.AuthenticationServiceImpl.validateGoogleIdTokenAndExtractEmail" : [ "commonauth.entities.responses.GenericOperationResponse.setHttpStatus", "commonauth.clients.impl.GoogleAuthClientImpl.validateGoogleIdTokenAndExtractEmail", "org.springframework.http.HttpStatus.name", "commonauth.entities.responses.GenericOperationResponse.setSuccessMessage", "commonauth.entities.responses.GenericOperationResponse.setData", "commonauth.entities.responses.GenericOperationResponse.<init>", "org.springframework.http.HttpStatus.value", "commonauth.entities.responses.GenericOperationResponse.setCode", "commonauth.entities.responses.GenericOperationResponse.setSuccess", "org.slf4j.Logger.error", "commonauth.entities.responses.GenericOperationResponse.setDetail" ],
  "commonauth.aspects.ControllerAdvice.onOtpDetailNotFoundException" : [ "org.springframework.http.ResponseEntity.badRequest", "commonauth.exceptions.OtpDetailNotFoundException.getErrorDetail", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.entities.truecaller.TruecallerCallbackRequest.toString" : [ "commonauth.entities.truecaller.TruecallerCallbackRequest.getEndpoint", "commonauth.entities.truecaller.TruecallerCallbackRequest.getRequestId", "commonauth.entities.truecaller.TruecallerCallbackRequest.getAccessToken", "commonauth.entities.truecaller.TruecallerCallbackRequest.getStatus" ],
  "commonauth.clients.CognitoClient.listUsersWithFilter" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.build" : [ "commonauth.entities.responses.GenericHTTPResponse.<init>" ],
  "commonauth.clients.CognitoClient.globalSignOut" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.util.MaskingUtils.maskUserName" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.util.MaskingUtils.maskPhoneNumber", "commonauth.util.MaskingUtils.maskEmail" ],
  "commonauth.enums.OtpChannel.values" : [ "[Lcommonauth.enums.OtpChannel;.clone" ],
  "commonauth.configurations.TracingConfig.tracer" : [ "io.opentracing.noop.NoopTracerFactory.create", "datadog.opentracing.DDTracer$DDTracerBuilder.serviceName", "datadog.opentracing.DDTracer$DDTracerBuilder.<init>", "datadog.opentracing.DDTracer$DDTracerBuilder.build", "datadog.trace.api.GlobalTracer.get", "io.opentracing.util.GlobalTracer.registerIfAbsent", "io.opentracing.util.GlobalTracer.get" ],
  "commonauth.metrics.Metrics.incrementNotificationServiceFailure" : [ "io.micrometer.core.instrument.MeterRegistry.counter", "io.micrometer.core.instrument.Counter.increment" ],
  "commonauth.clients.CognitoClient.adminDisableUser" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.entities.responses.ForgotPassResponse$ForgotPassResponseBuilder.build" : [ "commonauth.entities.responses.ForgotPassResponse.<init>" ],
  "commonauth.util.MaskingUtils.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.toString" : [ "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isDevice2faDisable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isLogin2faEnable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isGamma2faEnable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.getEntityId" ],
  "commonauth.controllers.AuthController.refreshToken" : [ "commonauth.services.AuthenticationService.handleRefreshToken" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.db.UserLogin.toString" : [ "commonauth.util.MaskingUtils.maskUserName" ],
  "commonauth.controllers.UserController.confirmPasswordReset" : [ "commonauth.services.impl.UserServiceImpl.handleConfirmForgotPass" ],
  "commonauth.clients.CognitoClient.adminDeleteUser" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.entities.responses.GoogleCaptchaVerificationResponse.toString" : [ "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getAction", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getHostname", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getScore", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.isSuccess", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getChallengeTimestamp", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getErrorCodes", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getApkName" ],
  "commonauth.util.filters.UsernameProcessingFilter.doFilter" : [ "commonauth.util.CDBUtils.getUsername", "commonauth.util.filters.CustomHttpServletRequestWrapper.setBody", "com.fasterxml.jackson.databind.JsonNode.toString", "jakarta.servlet.FilterChain.doFilter", "com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.isNull", "com.fasterxml.jackson.databind.node.ObjectNode.put", "commonauth.util.filters.CustomHttpServletRequestWrapper.<init>", "org.slf4j.Logger.info", "com.fasterxml.jackson.databind.JsonNode.asText", "commonauth.util.filters.CustomHttpServletRequestWrapper.getInputStream", "com.fasterxml.jackson.databind.ObjectMapper.readTree" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleGetTokens" : [ "commonauth.entities.db.AuthcodeTokenPair.getRefreshToken", "commonauth.entities.requests.GetTokenRequest.getAppId", "commonauth.dao.AuthcodeTokenPairDAO.findByAuthCode", "commonauth.entities.responses.AuthCodeExchangeResponse.<init>", "commonauth.exceptions.AuthCodeInvalidException.<init>", "commonauth.entities.db.AuthcodeTokenPair.getIdtoken", "commonauth.entities.db.AuthcodeTokenPair.getId", "org.slf4j.Logger.info", "commonauth.dao.AuthcodeTokenPairDAO.readAndDeleteToken", "org.slf4j.Logger.error", "commonauth.entities.db.AuthcodeTokenPair.getToken", "commonauth.entities.requests.GetTokenRequest.getAuthCode" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleLogOut" : [ "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.withUserPoolId", "commonauth.entities.responses.LogoutResponse.<init>", "com.amazonaws.services.cognitoidp.model.GlobalSignOutRequest.<init>", "com.amazonaws.services.cognitoidp.model.GlobalSignOutResult.getSdkHttpMetadata", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.requests.LogoutRequest.getAccessToken", "commonauth.clients.CognitoClient.globalSignOutWithUserName", "commonauth.entities.requests.LogoutRequest.isAdmin", "com.amazonaws.services.cognitoidp.model.GlobalSignOutRequest.setAccessToken", "commonauth.clients.CognitoClient.globalSignOut", "commonauth.entities.requests.LogoutRequest.getAppId", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.withUsername", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutResult.getSdkHttpMetadata", "commonauth.entities.requests.LogoutRequest.getUsername", "com.amazonaws.http.SdkHttpMetadata.getHttpStatusCode", "commonauth.exceptions.LogOutNotAuthorizedException.<init>", "commonauth.entities.responses.LogoutResponse.setMsg", "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.<init>", "commonauth.clients.CognitoClient.getUserPoolId" ],
  "commonauth.factory.impl.CognitoFactoryCachedImpl.createCognitoClient" : [ "commonauth.factory.AWSCognitoIdentityProviderFactory.createAWSCognitoIdentityProviderClient", "commonauth.clients.CognitoClient.<init>" ],
  "commonauth.services.impl.CaptchaVerificationServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.clients.CognitoClient.getClientSecret" : [ "com.amazonaws.services.cognitoidp.model.DescribeUserPoolClientResult.getUserPoolClient", "commonauth.clients.CognitoClient.describeClient", "com.amazonaws.services.cognitoidp.model.UserPoolClientType.getClientSecret" ],
  "commonauth.entities.errorclasses.ErrorDetailV2.toString" : [ "commonauth.entities.errorclasses.ErrorDetailV2.getReason", "commonauth.entities.errorclasses.ErrorDetailV2.getStatus", "commonauth.entities.errorclasses.ErrorDetailV2.getMessage" ],
  "commonauth.entities.responses.InitAuthResponse$ErrorData.hashCode" : [ "commonauth.entities.responses.InitAuthResponse$ErrorData.getLoginAttemptsLeft", "commonauth.entities.responses.InitAuthResponse$ErrorData.getLockedForMinutes", "commonauth.entities.responses.InitAuthResponse$ErrorData.getStatusCode", "commonauth.entities.responses.InitAuthResponse$ErrorData.getMessage" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.hashCode" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getUserAttributes", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getTitle", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getAccessToken", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getStatus", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getAuthCode", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getMessage", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getRefreshToken" ],
  "commonauth.util.Utility.createWhatsAppRequest" : [ "commonauth.entities.notificationSvc.WhatsAppRequest.setSource", "commonauth.entities.notificationSvc.WhatsAppRequest.setPhoneNumber", "commonauth.entities.notificationSvc.WhatsAppRequest.setRequestId", "commonauth.entities.notificationSvc.WhatsAppRequest.setData", "commonauth.entities.notificationSvc.WhatsAppRequest.setTemplate", "commonauth.entities.notificationSvc.WhatsAppRequest.<init>" ],
  "commonauth.aspects.ControllerAdvice.onNotAuthorizedException" : [ "org.springframework.http.HttpStatusCode.valueOf", "org.springframework.http.ResponseEntity.status", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build" ],
  "commonauth.controllers.UserController.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createUserForPasswordLessLogin" : [ "commonauth.util.Utility.isValidEmail", "commonauth.entities.db.ServiceApplication.getAppId", "commonauth.entities.requests.CreateUserRequest.getUsername", "commonauth.entities.requests.CreateUserRequest.getAppId", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getServiceApplication", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getCreateUserResponse", "commonauth.exceptions.CommonAuthBadRequestException.<init>", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createUserRequestForMobilePasswordLessFlow", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createUserRequestForEmailPasswordLessFlow", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getCognitoClientByAppId", "commonauth.util.Utility.isValidPhone", "commonauth.util.Utility.formatPhoneNumber", "commonauth.entities.requests.CreateUserRequest.setUsername", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createUserInIDP" ],
  "commonauth.services.impl.TruecallerLoginImpl.getTruecallerLoginDeepLink" : [ "org.springframework.web.util.UriComponents.toUriString", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaTextColor", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginSuffix", "commonauth.entities.truecaller.TruecallerLoginTheme.getPrivacyUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getSkipOption", "org.springframework.web.util.UriComponentsBuilder.newInstance", "org.springframework.web.util.UriComponentsBuilder.scheme", "commonauth.entities.truecaller.TruecallerLoginTheme.getPartnerName", "org.springframework.web.util.UriComponentsBuilder.host", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaPrefix", "commonauth.entities.truecaller.TruecallerLoginTheme.getTtl", "org.springframework.web.util.UriComponentsBuilder.path", "commonauth.entities.truecaller.TruecallerLoginTheme.getBtnShape", "commonauth.entities.truecaller.TruecallerLoginTheme.getTermsUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getBannerPath", "commonauth.entities.truecaller.TruecallerLoginTheme.getLanguageLocale", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaColor", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginPrefix", "org.springframework.web.util.UriComponentsBuilder.build" ],
  "commonauth.controllers.UserController.createUser" : [ "commonauth.entities.requests.CreateUserRequest.getUsername", "commonauth.util.MaskingUtils.maskUserName", "commonauth.entities.requests.CreateUserRequest.getAppId", "org.slf4j.Logger.info", "commonauth.services.impl.UserServiceImpl.handleCreateUser", "commonauth.services.PasswordLessCustomAuthService.createUserForPasswordLessLogin" ],
  "commonauth.controllers.AuthController.logOriginHeader" : [ "io.micrometer.common.util.StringUtils.isNotBlank", "io.micrometer.common.util.StringUtils.isBlank", "org.slf4j.Logger.info", "jakarta.servlet.http.HttpServletRequest.getHeader" ],
  "commonauth.exceptions.TruecallerLoginFlowException.<init>" : [ "org.springframework.http.HttpStatusCode.value", "commonauth.exceptions.CommonAuthDefaultException.<init>" ],
  "commonauth.clients.CognitoClient.lambda$forgotPassword$11" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.forgotPassword" ],
  "commonauth.services.impl.ApplicationServiceImpl.getApplication" : [ "commonauth.dao.ServiceApplicationDAO.findById" ],
  "commonauth.services.impl.UserServiceImpl.handleCreateUserResponse" : [ "commonauth.dao.AuditLogsDAO.saveAuditLog", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withUsername", "commonauth.entities.requests.CreateUserRequest.getUsername", "commonauth.entities.requests.CreateUserRequest.getAppId", "com.amazonaws.services.cognitoidp.model.AttributeType.<init>", "org.slf4j.Logger.error", "commonauth.entities.mongo.AuditLogs.setUserName", "commonauth.services.impl.UserServiceImpl.auditCreateUser", "commonauth.services.impl.UserServiceImpl.generateCreateUserResponse", "commonauth.entities.requests.CreateUserRequest.getUserAttributesMap", "com.amazonaws.services.cognitoidp.model.AttributeType.withValue", "com.amazonaws.services.cognitoidp.model.AttributeType.withName", "commonauth.enums.OtpChannel.getValText", "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.getUserAttributes", "org.springframework.http.HttpStatus.value", "commonauth.entities.mongo.AuditLogs.<init>", "com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.getSdkHttpMetadata", "commonauth.clients.CognitoClient.adminCreateUser", "commonauth.clients.CognitoClient.adminChangePassword", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.<init>", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordResult.getSdkHttpMetadata", "commonauth.entities.mongo.AuditLogs.setNewData", "commonauth.entities.responses.CreateUserResponse.<init>", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withPassword", "commonauth.util.Utility.getCognitoChannelTypeKey", "commonauth.entities.responses.CreateUserResponse.setSuccess", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withUserPoolId", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.mongo.AuditLogs.setUserAction", "com.amazonaws.services.cognitoidp.model.AdminSetUserPasswordRequest.withPermanent", "commonauth.exceptions.CreateUserInvalidParameterException.<init>", "commonauth.entities.requests.CreateUserRequest.getPassword", "com.amazonaws.http.SdkHttpMetadata.getHttpStatusCode", "commonauth.entities.mongo.AuditLogs.setAppId", "commonauth.clients.CognitoClient.getUserPoolId", "commonauth.constants.Constants$AuditLogUserActions.value" ],
  "commonauth.controllers.ApplicationController.addApplicationConfig" : [ "commonauth.services.ApplicationService.addOrUpdateApplicationConfig", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.build", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.success", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.detail", "commonauth.entities.responses.GenericOperationResponse.builder", "org.slf4j.Logger.info", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.code" ],
  "commonauth.dao.impl.ServiceApplicationDAOimpl.upsertApplication" : [ "commonauth.repository.ServiceApplicationRepository.save" ],
  "commonauth.aspects.ControllerAdvice.onOtpRequestBlocked" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.OtpRequestBlockedException.getErrorDetail" ],
  "commonauth.dao.impl.AuditLogsDAOImpl.saveAuditLog" : [ "commonauth.repository.AuditLogsRepository.save" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.sendOtpOnChannel" : [ "commonauth.clients.NotificationSvcClient.sendOtpToEmail", "commonauth.exceptions.CommonAuthServerException.<init>", "commonauth.util.Utility.createWhatsAppRequest", "commonauth.clients.NotificationSvcClient.sendOtpWhatsApp", "commonauth.util.Utility.isMockOtpApplicableForChannel", "commonauth.exceptions.CommonAuthBadRequestException.getMessage", "commonauth.enums.OtpChannel.ordinal", "org.slf4j.Logger.error", "commonauth.clients.NotificationSvcClient.sendOtpSms", "commonauth.exceptions.CommonAuthBadRequestException.<init>" ],
  "commonauth.entities.truecaller.TruecallerLoginTheme.hashCode" : [ "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaTextColor", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginSuffix", "commonauth.entities.truecaller.TruecallerLoginTheme.getPrivacyUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getSkipOption", "commonauth.entities.truecaller.TruecallerLoginTheme.getPartnerName", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaPrefix", "commonauth.entities.truecaller.TruecallerLoginTheme.getTtl", "commonauth.entities.truecaller.TruecallerLoginTheme.getBtnShape", "commonauth.entities.truecaller.TruecallerLoginTheme.getTermsUrl", "commonauth.entities.truecaller.TruecallerLoginTheme.getBannerPath", "commonauth.entities.truecaller.TruecallerLoginTheme.getLanguageLocale", "commonauth.entities.truecaller.TruecallerLoginTheme.getCtaColor", "commonauth.entities.truecaller.TruecallerLoginTheme.getLoginPrefix" ],
  "commonauth.clients.CognitoClient.updateUserAttributes" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.entities.requests.G2FaQrCodeResponse.hashCode" : [ "commonauth.entities.requests.G2FaQrCodeResponse.getQrUrl", "commonauth.entities.requests.G2FaQrCodeResponse.getSetupKey", "commonauth.entities.requests.G2FaQrCodeResponse.getQrCode" ],
  "commonauth.util.CDBUtils.saveBlockedOperation" : [ "commonauth.repository.BlockedOperationsRepository.save" ],
  "commonauth.services.impl.ValidationServiceImpl.generateOtpV2" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getSecondary2FAChannels", "commonauth.services.impl.ValidationServiceImpl.sendOtpOnChannel", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.db.OtpVerificationDetails.getUpdatedOn", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getChannel", "commonauth.entities.db.OtpVerificationDetails.setEncryptedOtpToken", "commonauth.exceptions.HttpClientException.<init>", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setMessage", "commonauth.entities.db.OtpVerificationDetails.getAttempts", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getRequestId", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.<init>", "commonauth.services.impl.ValidationServiceImpl.isSendOtpFunctionalityAccessible", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getChannelValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getLockId", "commonauth.entities.db.OtpVerificationDetails.getOtpVerificationStatus", "commonauth.enums.OtpChannel.getValText", "commonauth.dao.OtpVerificationDetailsDAO.findByOtpChannelAndOtpChannelValAndLockId", "commonauth.services.impl.ValidationServiceImpl.isSendOtpRequired", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getAppId", "commonauth.util.Utility.generateRandom", "commonauth.entities.db.OtpVerificationDetails.<init>", "commonauth.enums.OtpVerificationStatus.getValText", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setStatus", "commonauth.entities.db.ServiceApplication.getRetry", "commonauth.entities.db.ServiceApplication.getOtpSize", "commonauth.dao.OtpVerificationDetailsDAO.updateByOtpId", "commonauth.util.Utility.getHashByOtpAndChannelVal", "commonauth.entities.db.OtpVerificationDetails.setAttempts", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.getOtpValue", "commonauth.entities.db.OtpVerificationDetails.setOtpChannelVal", "commonauth.services.impl.ValidationServiceImpl.isOtpAttemptNeedRestart", "commonauth.entities.db.OtpVerificationDetails.setOtpChannel", "commonauth.entities.db.ServiceApplication.getOtpLockDuration", "commonauth.entities.db.ServiceApplication.getOtpSuccessCooldownPeriod", "commonauth.entities.db.OtpVerificationDetails.setLockId", "commonauth.entities.db.OtpVerificationDetails.setUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.setOtpFailedAttempts" ],
  "commonauth.services.impl.AuthenticationServiceImpl.getTrimmedToken" : [ "org.apache.commons.lang3.StringUtils.isNotBlank", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.OtpValidationServiceImpl.isVerifyOtpFunctionalityAccessible" : [ "commonauth.entities.db.ServiceApplication.getOtpFailedAttempts", "commonauth.entities.db.ServiceApplication.getRetry", "commonauth.entities.db.OtpVerificationDetails.getOtpFailedAttempts", "commonauth.entities.db.OtpVerificationDetails.getUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.getOtpVerificationStatus", "commonauth.entities.db.ServiceApplication.getOtpLockDuration", "commonauth.exceptions.HttpClientException.<init>", "commonauth.entities.db.OtpVerificationDetails.getAttempts", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.exceptions.HttpClientException.<init>" : [ "commonauth.exceptions.OtpDefaultException.<init>" ],
  "commonauth.controllers.UserController.filterUserGet" : [ "commonauth.services.impl.UserServiceImpl.handleFilterUsers", "org.slf4j.Logger.info" ],
  "commonauth.entities.requests.OtpChannelRequest.equals" : [ "commonauth.entities.requests.OtpChannelRequest.getChannelValue", "commonauth.entities.requests.OtpChannelRequest.getLockId", "commonauth.entities.requests.OtpChannelRequest.getChannel", "commonauth.entities.requests.OtpChannelRequest.getSource", "commonauth.entities.requests.OtpChannelRequest.canEqual", "commonauth.entities.requests.OtpChannelRequest.getRequestId", "commonauth.entities.requests.OtpChannelRequest.getAppId" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.equals" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.canEqual", "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.getEmail" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.respondToCustomAuth" : [ "commonauth.entities.db.ServiceApplication.getAppId", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.storeTokensInDB", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.updateVerificationDetailsInDB", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getServiceApplication", "commonauth.entities.requests.RespondToAuthRequest.getAppId", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.validateOtp", "commonauth.entities.requests.RespondToAuthRequest.setUsername", "commonauth.entities.requests.RespondToAuthRequest.getSession", "commonauth.exceptions.CommonAuthBadRequestException.<init>", "commonauth.entities.requests.RespondToAuthRequest.getUsername", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getOtpVerificationDetailForLockIdAndChannelIfValid", "commonauth.exceptions.OtpValidationException.<init>", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createSuccessRespondToAuthResponse", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getCognitoClientByAppId", "commonauth.util.Utility.formatPhoneNumber", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getAccessTokenForUser", "commonauth.util.Utility.getUsernameWithPrefix" ],
  "commonauth.clients.impl.NotificationSvcClientImpl.createSmsRequest" : [ "commonauth.entities.notificationSvc.SmsRequest.setPhoneNumber", "commonauth.entities.notificationSvc.SmsRequest.setTemplate", "commonauth.entities.notificationSvc.SmsRequestData.<init>", "commonauth.entities.notificationSvc.SmsRequestData.setCustomMessage", "commonauth.entities.notificationSvc.SmsRequest.<init>", "commonauth.entities.notificationSvc.SmsRequestData.setOtp", "commonauth.entities.notificationSvc.SmsRequest.setData" ],
  "commonauth.services.impl.TruecallerLoginImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.clients.CognitoClient.revokeTokens" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.enums.WhitelistedCountries.values" : [ "[Lcommonauth.enums.WhitelistedCountries;.clone" ],
  "commonauth.util.LockoutUtils.calculateLockoutTime" : [ "commonauth.enums.Environment.equals" ],
  "commonauth.entities.mongo.LoginMeta.toString" : [ "commonauth.entities.mongo.LoginMeta.getUserId", "commonauth.entities.mongo.LoginMeta.getLatitude", "commonauth.entities.mongo.LoginMeta.getLoginTime", "commonauth.entities.mongo.LoginMeta.getMerchantId", "commonauth.entities.mongo.LoginMeta.getIp", "commonauth.entities.mongo.LoginMeta.getAppId", "commonauth.entities.mongo.LoginMeta.getUserType", "commonauth.entities.mongo.LoginMeta.getUserAgent", "commonauth.entities.mongo.LoginMeta.getCity", "commonauth.entities.mongo.LoginMeta.getDevice", "commonauth.entities.mongo.LoginMeta.getIpMetadata", "commonauth.entities.mongo.LoginMeta.getCountry", "commonauth.entities.mongo.LoginMeta.getClientIp", "commonauth.entities.mongo.LoginMeta.getUsername", "commonauth.entities.mongo.LoginMeta.getProxyType", "commonauth.entities.mongo.LoginMeta.get_id", "commonauth.entities.mongo.LoginMeta.getDeviceId", "commonauth.entities.mongo.LoginMeta.getLongitude", "commonauth.entities.mongo.LoginMeta.getFpEventId" ],
  "commonauth.services.impl.PartnersAuthServiceImpl.handleInitAuth" : [ "commonauth.entities.requests.InitAuthRequest.getAuthFlowType", "commonauth.entities.responses.InitAuthResponse.getAuth", "commonauth.entities.requests.InitAuthRequest.getPassword", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.refreshToken", "com.amazonaws.services.cognitoidp.model.UserNotFoundException.<init>", "commonauth.entities.responses.InitAuthResponse.getAuthCode", "commonauth.entities.responses.InitAuthResponse.builder", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.is2FARequired", "commonauth.util.MaskingUtils.maskUserAttributes", "org.slf4j.Logger.info", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authCode", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.accessToken", "commonauth.entities.responses.InitAuthResponse.getRefreshToken", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.util.CDBUtils.getUserAttributes", "commonauth.services.impl.PartnersAuthServiceImpl.validatePassword", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.adminInitiateAuthResult", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.isAuth", "commonauth.entities.responses.InitAuthResponse.getAccessToken", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authenticationFailed", "commonauth.services.AuthenticationService.handleInitAuthPartners", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.exceptions.OtpRequestBlockedException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.aspects.ControllerAdvice.onGenericException" : [ "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.build", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.detail", "commonauth.entities.responses.GenericErrorResponse.setDetail", "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.code", "org.springframework.http.ResponseEntity.status", "commonauth.entities.responses.GenericErrorResponse.builder", "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.success", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleRefreshToken" : [ "commonauth.entities.requests.RefreshTokenRequest.getAppId", "commonauth.entities.db.ServiceApplication.getClientId", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.db.ServiceApplication.getClientSecret", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "org.slf4j.Logger.error", "commonauth.entities.requests.VerifyTokenRequest.<init>", "commonauth.entities.requests.VerifyTokenRequest.setAppId", "commonauth.entities.db.ServiceApplication.getUserPoolId", "commonauth.entities.responses.VerifyTokenResponse.getUserAttributesMap", "commonauth.exceptions.GenericException.<init>", "commonauth.entities.responses.VerifyTokenResponse.isValid", "commonauth.entities.requests.RefreshTokenRequest.getToken", "commonauth.entities.responses.RefreshTokenResponse.getJwtToken", "commonauth.entities.requests.VerifyTokenRequest.setToken", "commonauth.services.impl.AuthenticationServiceImpl.handleVerifyToken", "commonauth.entities.responses.RefreshTokenResponse.setUserAttributes", "commonauth.clients.CognitoClient.refreshToken" ],
  "commonauth.util.filters.Slf4jMDCFilter.<init>" : [ "org.springframework.web.filter.OncePerRequestFilter.<init>" ],
  "commonauth.clients.impl.GoogleAuthClientImpl.validateGoogleIdTokenAndExtractEmail" : [ "com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.getPayload", "com.google.api.client.googleapis.auth.oauth2.GoogleIdToken$Payload.getEmail", "commonauth.clients.impl.GoogleAuthClientImpl.validateIdToken" ],
  "commonauth.entities.requests.ReissueTokenRequest.hashCode" : [ "commonauth.entities.requests.ReissueTokenRequest.getUsername", "commonauth.entities.requests.ReissueTokenRequest.getEntityType", "commonauth.entities.requests.ReissueTokenRequest.getAuthCode", "commonauth.entities.requests.ReissueTokenRequest.getToken", "commonauth.entities.requests.ReissueTokenRequest.getRefresh", "commonauth.entities.requests.ReissueTokenRequest.getEntityId", "commonauth.entities.requests.ReissueTokenRequest.getAppId" ],
  "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.builder" : [ "commonauth.entities.twoFactorAuthentication.ResendOtpRequest$ResendOtpRequestBuilder.<init>" ],
  "commonauth.aspects.ControllerAdvice.onInvalidPasswordException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "org.slf4j.Logger.error" ],
  "commonauth.enums.FilterOperation.toFilterString" : [ "commonauth.enums.FilterOperation.getAttribute", "commonauth.enums.FilterAttribute.getCognitoAttribute", "commonauth.enums.FilterOperation.getOperation" ],
  "commonauth.util.CDBUtils.getG2FAChannelValue" : [ "commonauth.enums.UserEntityType.getValue" ],
  "commonauth.entities.requests.GetUserProfileRequest.toString" : [ "commonauth.entities.requests.GetUserProfileRequest.getToken", "commonauth.entities.requests.GetUserProfileRequest.getUserProfileEndpoint", "commonauth.entities.requests.GetUserProfileRequest.getLoginRequestId" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.validateOtp" : [ "commonauth.entities.requests.RespondToAuthRequest.getUsername", "commonauth.util.Utility.getHashByOtpAndChannelVal", "commonauth.entities.requests.RespondToAuthRequest.getAnswer", "org.slf4j.Logger.info", "commonauth.entities.db.OtpVerificationDetails.getEncryptedOtpToken" ],
  "commonauth.clients.CognitoClient.reissueToken" : [ "commonauth.clients.CognitoClient.storeTokensInDB", "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.jwtToken", "commonauth.util.GenericExceptionHandlerUtil.handleBasicExceptions", "commonauth.clients.CognitoClient.initAuthCustomAuth", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.util.MaskingUtils.maskUserName", "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.authCode", "commonauth.entities.responses.RefreshTokenResponse.builder", "commonauth.entities.responses.RefreshTokenResponse$RefreshTokenResponseBuilder.build", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult", "commonauth.entities.responses.RefreshTokenResponse.<init>" ],
  "commonauth.entities.mongo.BlockedOperations.hashCode" : [ "commonauth.entities.mongo.BlockedOperations.getUserType", "commonauth.entities.mongo.BlockedOperations.getCreatedAt", "commonauth.entities.mongo.BlockedOperations.getEmail", "commonauth.entities.mongo.BlockedOperations.getMerchantId", "commonauth.entities.mongo.BlockedOperations.getProxyType", "commonauth.entities.mongo.BlockedOperations.getUsername", "commonauth.entities.mongo.BlockedOperations.getUserAction", "commonauth.entities.mongo.BlockedOperations.getRequestBody", "commonauth.entities.mongo.BlockedOperations.getDeviceId", "commonauth.entities.mongo.BlockedOperations.getAliasId", "commonauth.entities.mongo.BlockedOperations.getReason", "commonauth.entities.mongo.BlockedOperations.getAccountAlias", "commonauth.entities.mongo.BlockedOperations.getIp", "commonauth.entities.mongo.BlockedOperations.getCountry", "commonauth.entities.mongo.BlockedOperations.get_id" ],
  "commonauth.entities.requests.OtpVerificationRequest.toString" : [ "commonauth.util.MaskingUtils.maskEntirely", "commonauth.util.MaskingUtils.maskUserName" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.insertOtp" : [ "commonauth.repository.OtpVerificationDetailsRepository.save", "commonauth.entities.db.OtpVerificationDetails.setOtpChannel", "commonauth.entities.db.OtpVerificationDetails.setEncryptedOtpToken", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.entities.db.OtpVerificationDetails.setAttempts", "commonauth.entities.db.OtpVerificationDetails.setLockId", "commonauth.entities.db.OtpVerificationDetails.setOtpChannelVal", "commonauth.entities.db.OtpVerificationDetails.<init>", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.entities.db.ServiceApplication.builder" : [ "commonauth.entities.db.ServiceApplication$ServiceApplicationBuilder.<init>" ],
  "commonauth.controllers.AuthController.sessionLogout" : [ "commonauth.services.AuthenticationService.handleSessionLogOut" ],
  "commonauth.controllers.ApplicationController.<init>" : [ "org.slf4j.Logger.info" ],
  "commonauth.entities.requests.CreateUserRequest.validateCreateUserRequest" : [ "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.exceptions.GenericException.<init>" ],
  "commonauth.clients.CognitoClient.lambda$adminEnableUser$8" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminEnableUser" ],
  "commonauth.util.CDBUtils.getOtpCacheId" : [ "commonauth.util.Utility.getRandomAlphaNumericString" ],
  "commonauth.aspects.ControllerAdvice.onOtpVerificationException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.exceptions.CommonAuthDefaultException.getErrorDetail", "org.slf4j.Logger.error" ],
  "commonauth.configurations.CacheConfig.caffeineConfig" : [ "com.github.benmanes.caffeine.cache.Caffeine.expireAfterWrite", "com.github.benmanes.caffeine.cache.Caffeine.newBuilder" ],
  "commonauth.entities.Constants.<clinit>" : [ "commonauth.enums.Environment.val" ],
  "commonauth.constants.ThreadPoolConfig.values" : [ "[Lcommonauth.constants.ThreadPoolConfig;.clone" ],
  "commonauth.controllers.UserLoginController.handleUserConsentForLogin" : [ "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.build", "commonauth.factory.UserLoginContext.handleUserConsent", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.success", "org.slf4j.Logger.info", "commonauth.entities.responses.GenericHTTPResponse.builder", "org.slf4j.Logger.error" ],
  "commonauth.aspects.ControllerAdvice.onTemporaryBlockedOtpException" : [ "commonauth.exceptions.TemporaryBlockedOtpException.getErrorDetail", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "org.slf4j.Logger.error", "commonauth.exceptions.TemporaryBlockedOtpException.getMessage" ],
  "commonauth.services.impl.OtpValidationServiceImpl.handleInitAuth" : [ "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.setChallengeName", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.db.OtpVerificationDetails.getUpdatedOn", "commonauth.util.MaskingUtils.maskPhoneNumber", "org.slf4j.Logger.info", "org.slf4j.Logger.warn", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.<init>", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.adminInitiateAuthResult", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.isAuth", "commonauth.entities.db.OtpVerificationDetails.getOtpVerificationStatus", "commonauth.enums.OtpChannel.getValText", "commonauth.entities.db.OtpVerificationDetails.getAddedOn", "commonauth.services.impl.OtpValidationServiceImpl.isMockOtp", "commonauth.clients.NotificationSvcClient.sendOtpSms", "commonauth.util.Utility.generateRandom", "commonauth.entities.db.OtpVerificationDetails.<init>", "commonauth.enums.OtpVerificationStatus.getValText", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.setSession", "commonauth.dao.OtpVerificationDetailsDAO.insertOtpWithAddedOn", "commonauth.entities.db.ServiceApplication.getOtpSize", "commonauth.exceptions.TemporaryBlockedOtpException.<init>", "commonauth.util.Utility.getHashByOtpAndChannelVal", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.setChallengeParameters", "commonauth.entities.responses.InitAuthResponse.builder", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.is2FARequired", "commonauth.util.Utility.getRandomAlphaNumericString", "commonauth.util.Utility.generateMockOtp", "commonauth.dao.OtpVerificationDetailsDAO.findByKeyNameAndAddedOn", "commonauth.util.Utility.formatPhoneNumber", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.entities.requests.UpdateUserRequest.toString" : [ "commonauth.util.MaskingUtils.maskUserName" ],
  "commonauth.dao.impl.ServiceApplicationDAOimpl.deleteById" : [ "commonauth.repository.ServiceApplicationRepository.findById", "commonauth.exceptions.ServiceApplicationNotRegisteredException.<init>", "commonauth.repository.ServiceApplicationRepository.deleteById" ],
  "commonauth.services.impl.ValidationServiceImpl.updateCurrentStateGenerateOtp" : [ "commonauth.entities.db.OtpVerificationDetails.getId", "commonauth.entities.db.OtpVerificationDetails.setEncryptedOtpToken", "commonauth.dao.OtpVerificationDetailsDAO.updateByOtpId", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.entities.db.OtpVerificationDetails.setUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.setId", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.entities.requests.InitiateLoginResponse.hashCode" : [ "commonauth.entities.requests.InitiateLoginResponse.getRedirectUrl", "commonauth.entities.requests.InitiateLoginResponse.getLoginRequestId" ],
  "commonauth.services.impl.PartnersAuthServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.exceptions.HttpServerException.<init>" : [ "commonauth.exceptions.CommonAuthDefaultException.<init>" ],
  "commonauth.entities.db.UserLogin.hashCode" : [ "commonauth.entities.db.UserLogin.getLastFailedLoginAttempt", "commonauth.entities.db.UserLogin.getFailedLoginCount", "commonauth.entities.db.UserLogin.getUsername", "commonauth.entities.db.UserLogin.getId", "commonauth.entities.db.UserLogin.getAppId", "commonauth.entities.db.UserLogin.getIsLocked", "commonauth.entities.db.UserLogin.getLockUntil" ],
  "commonauth.clients.CognitoClient.lambda$adminDeleteUser$10" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminDeleteUser" ],
  "commonauth.util.MaskingUtils.genericMask" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.util.MaskingUtils.genericMask" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.toString" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getUserAttributes", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getTitle", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getAccessToken", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getStatus", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getAuthCode", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getMessage", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getRefreshToken" ],
  "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.hashCode" : [ "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isDevice2faDisable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isLogin2faEnable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.isGamma2faEnable", "commonauth.entities.twoFactorAuthentication.Merchant2FAContext.getEntityId" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.toString" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.getAdditionalInfo", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.getUserProfile" ],
  "commonauth.controllers.ValidationController.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.mongo.AuditLogs.toString" : [ "commonauth.entities.mongo.AuditLogs.getUserName", "commonauth.entities.mongo.AuditLogs.getAppId", "commonauth.entities.mongo.AuditLogs.getDeviceType", "commonauth.entities.mongo.AuditLogs.getNewData", "commonauth.entities.mongo.AuditLogs.getAddedOn", "commonauth.entities.mongo.AuditLogs.getUserAction", "commonauth.entities.mongo.AuditLogs.getOldData", "commonauth.entities.mongo.AuditLogs.getDeviceId", "commonauth.entities.mongo.AuditLogs.get_id", "commonauth.entities.mongo.AuditLogs.getAddedBy" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.mapToGenerateOtpRequestV2" : [ "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getLockId", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.builder", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.channel", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.lockId", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getChannel", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getChannelValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.channelValue", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getAppId", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.build", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.appId" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.findByOtpChannelAndOtpChannelValAndLockId" : [ "commonauth.repository.OtpVerificationDetailsRepository.findByOtpChannelAndOtpChannelValAndLockId" ],
  "commonauth.clients.impl.ShieldSvcClientImpl.<init>" : [ "org.springframework.boot.web.client.RestTemplateBuilder.setConnectTimeout", "org.springframework.boot.web.client.RestTemplateBuilder.build" ],
  "commonauth.services.impl.UserServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.aspects.ControllerAdvice.onAWSCognitoIdentityProviderException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity.notFound", "commonauth.metrics.Metrics.incrementCognitoServerError", "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build", "org.springframework.http.ResponseEntity$HeadersBuilder.build", "com.amazonaws.services.cognitoidp.model.AWSCognitoIdentityProviderException.getStatusCode" ],
  "commonauth.aspects.ControllerAdvice.onHttpMessageNotReadableException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build" ],
  "commonauth.services.impl.UserServiceImpl.lambda$handleListUsersGet$1" : [ "org.slf4j.Logger.error" ],
  "commonauth.dao.impl.ServiceApplicationDAOimpl.findById" : [ "commonauth.repository.ServiceApplicationRepository.findById", "commonauth.exceptions.ServiceApplicationNotRegisteredException.<init>" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.initiateCustomAuth" : [ "commonauth.exceptions.OtpRequestBlockedException.<init>", "commonauth.util.Utility.isValidEmail", "commonauth.entities.db.ServiceApplication.getAppId", "commonauth.entities.db.ServiceApplication.getOtpSize", "commonauth.util.Utility.getHashByOtpAndChannelVal", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createInitAuthResponse", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getServiceApplication", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.isSendOtpApplicable", "commonauth.util.Utility.getRandomAlphaNumericString", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getOtpValue", "org.slf4j.Logger.error", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.insertVerificationDetail", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.exceptions.CommonAuthBadRequestException.<init>", "commonauth.entities.requests.InitAuthRequest.setUsername", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getCognitoClientByAppId", "commonauth.util.Utility.isValidPhone", "commonauth.util.Utility.formatPhoneNumber", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.checkIfUserExists", "commonauth.util.Utility.getUsernameWithPrefix", "commonauth.entities.requests.InitAuthRequest.getUsername", "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.sendOtpOnChannel" ],
  "commonauth.services.impl.UserServiceImpl.lambda$handleListUsersGet$0" : [ "commonauth.clients.CognitoClient.getUser" ],
  "commonauth.util.filters.DatadogTaggingFilter.doFilter" : [ "org.slf4j.Logger.debug", "io.opentracing.Span.setTag", "jakarta.servlet.FilterChain.doFilter", "com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.isNull", "io.opentracing.Tracer.activeSpan", "commonauth.util.filters.CustomHttpServletRequestWrapper.<init>", "org.slf4j.Logger.info", "com.fasterxml.jackson.databind.JsonNode.asText", "commonauth.util.filters.CustomHttpServletRequestWrapper.getInputStream", "com.fasterxml.jackson.databind.JsonNode.has", "com.fasterxml.jackson.databind.ObjectMapper.readTree" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.hashCode" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getCountryCode", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getStreet", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getCity", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getZipcode" ],
  "commonauth.util.filters.UsernameProcessingFilter.<init>" : [ "com.fasterxml.jackson.databind.ObjectMapper.<init>" ],
  "commonauth.aspects.ControllerAdvice.onHttpServerException" : [ "commonauth.exceptions.HttpServerException.getErrorDetail", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.entities.errorclasses.ErrorDetail.getStatus", "org.slf4j.Logger.error" ],
  "commonauth.exceptions.ErrorConstants$ErrorType.<clinit>" : [ "org.springframework.http.HttpStatus.name", "commonauth.exceptions.ErrorConstants$ErrorType.$values", "commonauth.exceptions.ErrorConstants$ErrorType.<init>" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.insertOtpWithAddedOn" : [ "commonauth.repository.OtpVerificationDetailsRepository.save", "commonauth.entities.db.OtpVerificationDetails.setOtpChannel", "commonauth.entities.db.OtpVerificationDetails.setEncryptedOtpToken", "commonauth.entities.db.OtpVerificationDetails.setAddedOn", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.entities.db.OtpVerificationDetails.setLockId", "commonauth.entities.db.OtpVerificationDetails.setAttempts", "commonauth.entities.db.OtpVerificationDetails.setOtpChannelVal", "commonauth.entities.db.OtpVerificationDetails.setUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.<init>", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.constants.Constants$AuditLogUserActions.<clinit>" : [ "commonauth.constants.Constants$AuditLogUserActions.$values", "commonauth.constants.Constants$AuditLogUserActions.<init>" ],
  "commonauth.exceptions.CommonAuthDefaultException.<init>" : [ "commonauth.entities.errorclasses.ErrorDetail.setMessage", "commonauth.entities.errorclasses.ErrorDetail.setStatus", "commonauth.entities.errorclasses.ErrorDetail.<init>", "commonauth.entities.errorclasses.ErrorDetail.setReason" ],
  "commonauth.enums.UserAction.values" : [ "[Lcommonauth.enums.UserAction;.clone" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleSessionLogOut" : [ "com.amazonaws.services.cognitoidp.model.RevokeTokenRequest.<init>", "commonauth.entities.db.AuthcodeTokenPair.getRefreshToken", "commonauth.entities.db.ServiceApplication.getClientId", "commonauth.entities.responses.LogoutResponse.<init>", "commonauth.dao.ServiceApplicationDAO.findById", "com.amazonaws.services.cognitoidp.model.RevokeTokenRequest.setToken", "commonauth.dao.AuthcodeTokenPairDAO.findByAuthCode", "commonauth.entities.db.ServiceApplication.getClientSecret", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.RevokeTokenRequest.setClientId", "commonauth.clients.CognitoClient.revokeTokens", "commonauth.entities.requests.SessionLogoutRequest.getAppId", "com.amazonaws.http.SdkHttpMetadata.getHttpStatusCode", "commonauth.dao.AuthcodeTokenPairDAO.deleteByAuthCode", "commonauth.exceptions.LogOutNotAuthorizedException.<init>", "commonauth.entities.responses.LogoutResponse.setMsg", "commonauth.entities.requests.SessionLogoutRequest.getAuthCode", "com.amazonaws.services.cognitoidp.model.RevokeTokenResult.getSdkHttpMetadata", "com.amazonaws.services.cognitoidp.model.RevokeTokenRequest.setClientSecret" ],
  "commonauth.aspects.ControllerAdvice.onInconsistentChannelValException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.exceptions.InconsistentChannelValException.getErrorDetail", "org.slf4j.Logger.error" ],
  "commonauth.controllers.UserLoginController.getAuthToken" : [ "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.data", "commonauth.factory.UserLoginContext.getAuthToken", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.build", "commonauth.entities.responses.GenericHTTPResponse$GenericHTTPResponseBuilder.success", "org.slf4j.Logger.info", "commonauth.entities.responses.GenericHTTPResponse.builder", "org.slf4j.Logger.error" ],
  "commonauth.clients.CognitoClient.lambda$updateUserAttributesWithToken$7" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.updateUserAttributes" ],
  "commonauth.factory.UserLoginContext.getUserProfile" : [ "commonauth.factory.UserLoginStrategy.getUserProfile", "commonauth.factory.UserLoginContext.getUserLoginStrategy" ],
  "commonauth.util.CDBUtils.lambda$getUpdatedKnownDevices$2" : [ "commonauth.util.CDBUtils$KnownDevice.<init>" ],
  "commonauth.util.CDBUtils.lambda$getUpdatedKnownDevices$1" : [ "commonauth.util.CDBUtils.isTimestampOlderThan30Days" ],
  "commonauth.util.filters.UsernameProcessingFilter.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.controllers.ApplicationController.getApplicationConfig" : [ "org.slf4j.Logger.info", "commonauth.services.ApplicationService.getApplication" ],
  "commonauth.clients.CognitoClient.lambda$adminChangePassword$14" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminSetUserPassword" ],
  "commonauth.util.CDBUtils.lambda$getUpdatedKnownDevices$3" : [ "commonauth.util.CDBUtils$KnownDevice.getDeviceId", "commonauth.util.CDBUtils$KnownDevice.getTimestamp" ],
  "commonauth.services.impl.TruecallerLoginImpl.notifyLoginStatus" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData$ProfileDataBuilder.additionalInfo", "commonauth.entities.db.AuthcodeTokenPair.getStatus", "commonauth.enums.LoginStatus.equals", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.setData", "commonauth.entities.db.AuthcodeTokenPair.getMetadata", "org.slf4j.Logger.info", "commonauth.entities.db.AuthcodeTokenPair.getToken", "commonauth.clients.LoginStatusNotifierClient.notify", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.builder", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$TruecallerNotifyConsentStatusBuilder.loginRequestId", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData$ProfileDataBuilder.build", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$TruecallerNotifyConsentStatusBuilder.build", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$TruecallerNotifyConsentStatusBuilder.status", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.builder", "commonauth.entities.db.AuthcodeTokenPair.getAuthCode", "commonauth.services.impl.TruecallerLoginImpl.getUserProfileResponseFromTruecallerResponse", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData$ProfileDataBuilder.userProfile", "commonauth.services.impl.TruecallerLoginImpl.getValueFromAuthTokenMetadata", "commonauth.clients.impl.TruecallerClientImpl.getUserProfile" ],
  "commonauth.util.GenericExceptionHandlerUtil.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.enums.UserEntityType.<clinit>" : [ "commonauth.enums.UserEntityType.$values", "commonauth.enums.UserEntityType.<init>" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.equals" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.canEqual", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getLastName", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Name.getFirstName" ],
  "commonauth.clients.CognitoClient.forgotPassword" : [ "commonauth.util.MetricsUtil.executeWithMetrics" ],
  "commonauth.entities.responses.ForgotPassResponse.builder" : [ "commonauth.entities.responses.ForgotPassResponse$ForgotPassResponseBuilder.<init>" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getCreateUserResponse" : [ "commonauth.entities.responses.CreateUserResponse.setSuccess", "commonauth.entities.responses.CreateUserResponse.setHttpStatus", "com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.getUser", "com.amazonaws.services.cognitoidp.model.UserType.getUsername", "org.springframework.http.HttpStatus.getReasonPhrase", "org.springframework.http.HttpStatus.value", "commonauth.entities.responses.CreateUserResponse.setDetail", "commonauth.entities.responses.CreateUserResponse.<init>", "commonauth.entities.responses.CreateUserResponse.setData", "commonauth.entities.responses.CreateUserResponse.setCode", "com.amazonaws.services.cognitoidp.model.UserType.getUserStatus" ],
  "commonauth.factory.UserLoginContext.initiateLogin" : [ "commonauth.factory.UserLoginContext.getUserLoginStrategy", "commonauth.factory.UserLoginStrategy.initiateLogin" ],
  "commonauth.dao.impl.AuthcodeTokenPairDAOImpl.deleteByAuthCode" : [ "commonauth.repository.AuthcodeTokenPairRepository.deleteByAuthCode" ],
  "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.build" : [ "commonauth.entities.responses.InitAuthResponse$ErrorData.<init>" ],
  "commonauth.clients.CognitoClient.initAuthPasswordLess" : [ "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setUserPoolId", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.entities.responses.InitAuthResponse.builder", "commonauth.clients.CognitoClient.getClientSecret", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.<init>", "commonauth.util.MetricsUtil.executeWithMetrics", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.adminInitiateAuthResult", "commonauth.entities.db.ServiceApplication.getUserPoolId", "commonauth.util.Utility.getSecretHash", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setClientId", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.setAuthFlow", "commonauth.entities.requests.InitAuthRequest.getUsername", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.addAuthParametersEntry" ],
  "commonauth.util.filters.DatadogTaggingFilter.<init>" : [ "com.fasterxml.jackson.databind.ObjectMapper.registerModule", "com.fasterxml.jackson.databind.ObjectMapper.<init>", "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule.<init>" ],
  "commonauth.util.CDBUtils$KnownDevice.compareTo" : [ "commonauth.util.CDBUtils$KnownDevice.compareTo" ],
  "commonauth.exceptions.CommonAuthBadRequestException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.entities.twoFactorAuthentication.TwoFALoginData.toString" : [ "commonauth.entities.twoFactorAuthentication.TwoFALoginData.getChannel", "commonauth.entities.twoFactorAuthentication.TwoFALoginData.getChannelValue" ],
  "commonauth.util.GenericExceptionHandlerUtil.handleBasicExceptions" : [ "commonauth.exceptions.GenericException.<init>", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.requests.GetUserProfileResponse.toString" : [ "commonauth.entities.requests.GetUserProfileResponse.getName", "commonauth.entities.requests.GetUserProfileResponse.getMetadata", "commonauth.entities.requests.GetUserProfileResponse.getEmail", "commonauth.entities.requests.GetUserProfileResponse.getPhoneNumber" ],
  "commonauth.enums.UserAction.<clinit>" : [ "commonauth.enums.UserAction.$values", "commonauth.enums.UserAction.<init>" ],
  "commonauth.controllers.ValidationController.verifyOtpV2" : [ "commonauth.services.ValidationService.verifyOtpV2", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.isLoginFlow", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getAppId", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setStatus", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setMessage", "commonauth.services.impl.MerchantAuthServiceImpl.verifyOtpV2", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setTitle", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.verifyOtpRequestV2Validation", "org.slf4j.Logger.info", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.UserServiceImpl.handleListUsersGet" : [ "commonauth.entities.responses.ListUsersGetResponse.<init>", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.requests.ListUsersGetRequest.getUsernames", "commonauth.entities.requests.ListUsersGetRequest.getAppId", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.util.CommonAuthThreadPoolExecutor.getExecutor" ],
  "commonauth.util.filters.Slf4jMDCFilter.resolveToken" : [ "org.springframework.util.StringUtils.hasText", "jakarta.servlet.http.HttpServletRequest.getHeader" ],
  "commonauth.entities.requests.OtpChannelRequest.otpChannelRequestValidation" : [ "commonauth.enums.OtpChannel.getValText", "commonauth.exceptions.OtpRequestValidationException.<init>" ],
  "commonauth.aspects.ControllerAdvice.onMethodArgumentNotValidException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body" ],
  "commonauth.aspects.ControllerAdvice.onInvalidEnableDisbaleActionException" : [ "org.springframework.http.ResponseEntity.badRequest", "commonauth.entities.MessageClass$MessageClassBuilder.build", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.MessageClass.builder", "org.slf4j.Logger.info", "commonauth.entities.MessageClass$MessageClassBuilder.message" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.toString" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getStatus", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getLoginRequestId", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getData" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.hashCode" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.isLoginFlow", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getAppId", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannelValue", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getOtpValue", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannel", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getLockId", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getOtpCacheId" ],
  "commonauth.controllers.DevController.clearSpecificCache" : [ "org.springframework.cache.Cache.clear", "org.springframework.cache.CacheManager.getCache" ],
  "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient" : [ "commonauth.entities.db.ServiceApplication.getRegion", "commonauth.entities.db.ServiceApplication.getClientId", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.factory.AWSCognitoIdentityProviderFactory.createAWSCognitoIdentityProviderClient", "commonauth.entities.db.ServiceApplication.getUserPoolId", "commonauth.clients.CognitoClient.<init>" ],
  "commonauth.controllers.UserController.getG2FAQR" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.requests.G2faQrRequest.setToken", "commonauth.entities.requests.G2FaQrCodeResponse.getHttpStatus", "org.springframework.http.ResponseEntity.status", "commonauth.services.impl.UserServiceImpl.handleGetG2FAQR" ],
  "commonauth.entities.responses.SendEmailNotificationResponse.toString" : [ "commonauth.entities.responses.SendEmailNotificationResponse.getStatus", "commonauth.entities.responses.SendEmailNotificationResponse.getMessage" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleFailedLogin" : [ "commonauth.entities.db.ServiceApplication.getAppId", "commonauth.entities.db.UserLogin$UserLoginBuilder.isLocked", "commonauth.repository.UserLoginRepository.save", "org.slf4j.Logger.info", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.build", "org.slf4j.Logger.error", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.loginAttemptsLeft", "commonauth.util.LockoutUtils.calculateLockoutTime", "commonauth.entities.db.UserLogin.builder", "org.springframework.http.HttpStatus.value", "commonauth.entities.db.UserLogin$UserLoginBuilder.build", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.statusCode", "commonauth.entities.db.UserLogin$UserLoginBuilder.appId", "commonauth.entities.responses.InitAuthResponse$ErrorData.builder", "commonauth.entities.db.UserLogin.setIsLocked", "commonauth.entities.db.UserLogin$UserLoginBuilder.failedLoginCount", "commonauth.entities.db.UserLogin.setLockUntil", "commonauth.entities.db.UserLogin$UserLoginBuilder.username", "commonauth.entities.db.UserLogin.setFailedLoginCount", "commonauth.util.CDBUtils.getUserAttributes", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.util.MaskingUtils.maskUserName", "commonauth.entities.db.UserLogin.getFailedLoginCount", "commonauth.entities.db.ServiceApplication.getMaxPasswordFailedAttempts", "commonauth.clients.NotificationSvcClient.notifyAccountLock", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.message", "commonauth.entities.db.UserLogin$UserLoginBuilder.lastFailedLoginAttempt", "commonauth.entities.responses.InitAuthResponse$ErrorData$ErrorDataBuilder.lockedForMinutes" ],
  "commonauth.entities.requests.GetUserProfileResponse.equals" : [ "commonauth.entities.requests.GetUserProfileResponse.getName", "commonauth.entities.requests.GetUserProfileResponse.getMetadata", "commonauth.entities.requests.GetUserProfileResponse.getEmail", "commonauth.entities.requests.GetUserProfileResponse.getPhoneNumber", "commonauth.entities.requests.GetUserProfileResponse.canEqual" ],
  "commonauth.services.impl.TruecallerLoginImpl.initiateLogin" : [ "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.status", "com.fasterxml.jackson.databind.ObjectMapper.convertValue", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.addedOn", "commonauth.util.Utility.getRandomAlphaNumericString", "commonauth.entities.db.AuthcodeTokenPair.builder", "commonauth.entities.truecaller.TruecallerLoginTheme.<init>", "org.slf4j.Logger.error", "commonauth.entities.requests.InitiateLoginRequest.getLoginTheme", "commonauth.entities.requests.InitiateLoginResponse.<init>", "commonauth.exceptions.InvalidRequestException.<init>", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.requests.InitiateLoginResponse.setRedirectUrl", "commonauth.entities.requests.InitiateLoginRequest.getNotifyUrl", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.authCode", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.remarks", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.metadata", "commonauth.repository.AuthcodeTokenPairRepository.save", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.provider", "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.build", "commonauth.entities.requests.InitiateLoginResponse.setLoginRequestId", "commonauth.services.impl.TruecallerLoginImpl.getTruecallerLoginDeepLink" ],
  "commonauth.controllers.UserController.updatePassword" : [ "commonauth.services.impl.UserServiceImpl.handleUpdatePassword", "commonauth.entities.requests.UpdatePasswordRequest.getAppId", "org.slf4j.Logger.info" ],
  "commonauth.controllers.CaptchaVerificationController.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.responses.GoogleCaptchaVerificationResponse.hashCode" : [ "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getAction", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getHostname", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getScore", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.isSuccess", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getChallengeTimestamp", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getErrorCodes", "commonauth.entities.responses.GoogleCaptchaVerificationResponse.getApkName" ],
  "commonauth.services.impl.UserServiceImpl.handleUserUpdate" : [ "com.amazonaws.services.cognitoidp.model.InvalidParameterException.getMessage", "com.amazonaws.services.cognitoidp.model.UpdateUserAttributesRequest.withAccessToken", "commonauth.clients.CognitoClient.updateUserAttributesWithToken", "com.amazonaws.services.cognitoidp.model.UpdateUserAttributesRequest.withUserAttributes", "com.amazonaws.services.cognitoidp.model.UpdateUserAttributesRequest.<init>", "com.amazonaws.services.cognitoidp.model.AliasExistsException.getMessage", "commonauth.exceptions.GenericException.<init>", "com.amazonaws.services.cognitoidp.model.NotAuthorizedException.getMessage", "org.slf4j.Logger.error", "commonauth.entities.requests.UpdateUserRequest.getAccessToken" ],
  "commonauth.util.Utility.getUsernameWithPrefix" : [ "io.micrometer.common.util.StringUtils.isBlank" ],
  "commonauth.clients.impl.TruecallerClientImpl.getUserProfile" : [ "com.fasterxml.jackson.databind.ObjectMapper.readValue", "org.springframework.web.client.HttpClientErrorException.getMessage", "commonauth.exceptions.TruecallerLoginFlowException.<init>", "org.springframework.http.HttpHeaders.<init>", "com.fasterxml.jackson.core.JsonProcessingException.getMessage", "org.springframework.http.HttpEntity.<init>", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity.getBody", "org.springframework.web.client.HttpClientErrorException.getStatusCode", "org.springframework.http.HttpHeaders.setBearerAuth", "org.springframework.web.client.RestTemplate.exchange", "org.springframework.web.client.HttpServerErrorException.getMessage", "org.springframework.http.HttpStatus.equals" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.fetchCache2FALoginData" : [ "com.fasterxml.jackson.databind.ObjectMapper.readValue", "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.exceptions.HttpClientException.<init>", "commonauth.exceptions.GenericException.<init>", "org.slf4j.Logger.error", "org.springframework.data.redis.core.RedisTemplate.opsForValue", "org.springframework.data.redis.core.ValueOperations.get" ],
  "commonauth.aspects.ControllerAdvice.onCommonAuthBadRequest" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.CommonAuthBadRequestException.getErrorDetail" ],
  "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.<clinit>" : [ "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.$values", "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.<init>" ],
  "commonauth.enums.WhitelistedCountries.getCountryCodes" : [ "commonauth.enums.WhitelistedCountries.values", "commonauth.enums.WhitelistedCountries.name" ],
  "commonauth.entities.Constants$CaptchaSource.values" : [ "[Lcommonauth.entities.Constants$CaptchaSource;.clone" ],
  "commonauth.exceptions.OtpRequestValidationException.<init>" : [ "commonauth.exceptions.OtpCommonException.<init>" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getOtpValue" : [ "commonauth.util.Utility.isMockOtpApplicableForChannel", "org.slf4j.Logger.info", "commonauth.util.Utility.generateMockOtp", "commonauth.util.Utility.generateRandom" ],
  "commonauth.entities.responses.InitAuthResponse$ErrorData.toString" : [ "commonauth.entities.responses.InitAuthResponse$ErrorData.getLoginAttemptsLeft", "commonauth.entities.responses.InitAuthResponse$ErrorData.getLockedForMinutes", "commonauth.entities.responses.InitAuthResponse$ErrorData.getStatusCode", "commonauth.entities.responses.InitAuthResponse$ErrorData.getMessage" ],
  "commonauth.services.impl.UserServiceImpl.generateCreateUserResponse" : [ "commonauth.entities.responses.CreateUserResponse.setSuccess", "commonauth.entities.responses.CreateUserResponse.setMessage", "org.springframework.http.HttpStatus.name", "commonauth.entities.responses.CreateUserResponse.setStatus", "commonauth.entities.responses.CreateUserResponse.setDetail", "commonauth.entities.responses.CreateUserResponse.<init>", "commonauth.entities.responses.CreateUserResponse.setCode" ],
  "commonauth.CommonauthApplication.main" : [ "org.springframework.boot.SpringApplication.run" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.hashCode" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$OnlineIdentities.getEmail" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.getOtpVerificationDetailForLockIdAndChannelIfValid" : [ "commonauth.exceptions.CommonAuthServerException.<init>", "commonauth.entities.db.OtpVerificationDetails.getOtpFailedAttempts", "commonauth.exceptions.OtpValidationException.<init>", "commonauth.enums.OtpChannel.getValText", "commonauth.entities.db.OtpVerificationDetails.getOtpVerificationStatus", "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.allowedSuccessfulAttempts", "commonauth.dao.OtpVerificationDetailsDAO.findByOtpChannelAndOtpChannelValAndLockId", "commonauth.entities.db.OtpVerificationDetails.getAddedOn", "org.slf4j.Logger.error", "commonauth.exceptions.CommonAuthBadRequestException.<init>", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.entities.db.UserLogin.builder" : [ "commonauth.entities.db.UserLogin$UserLoginBuilder.<init>" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData.builder" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus$ProfileData$ProfileDataBuilder.<init>" ],
  "commonauth.configurations.CORSConfiguration.addCorsMappings" : [ "org.springframework.web.servlet.config.annotation.CorsRegistration.allowedOriginPatterns", "org.springframework.web.servlet.config.annotation.CorsRegistry.addMapping", "org.springframework.web.servlet.config.annotation.CorsRegistration.allowCredentials", "org.springframework.web.servlet.config.annotation.CorsRegistration.allowedHeaders", "org.springframework.web.servlet.config.annotation.CorsRegistration.allowedMethods" ],
  "commonauth.aspects.ControllerAdvice.onUnknownException" : [ "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.build", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.detail", "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.code", "commonauth.util.Utility.getTopLinesFromException", "commonauth.entities.responses.GenericErrorResponse.builder", "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.success", "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error" ],
  "commonauth.aspects.ControllerAdvice.onVerifyTokenNotAuthorizedException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.ok", "commonauth.entities.responses.VerifyTokenResponse$VerifyTokenResponseBuilder.build", "commonauth.entities.responses.VerifyTokenResponse.builder", "org.slf4j.Logger.error", "commonauth.entities.responses.VerifyTokenResponse$VerifyTokenResponseBuilder.valid" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createUserInIDP" : [ "com.amazonaws.services.cognitoidp.model.UsernameExistsException.getMessage", "commonauth.exceptions.CommonAuthServerException.<init>", "commonauth.clients.CognitoClient.adminCreateUser", "com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.getUser", "commonauth.exceptions.UserAlreadyExistsException.<init>", "org.slf4j.Logger.error" ],
  "commonauth.factory.UserLoginContext.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.enums.FilterOperation.<clinit>" : [ "commonauth.enums.FilterOperation.<init>", "commonauth.enums.FilterOperation.$values" ],
  "commonauth.aspects.ControllerAdvice.onLogOutNotAuthorizedException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.responses.LogoutResponse.<init>", "org.slf4j.Logger.error", "commonauth.entities.responses.LogoutResponse.setMsg" ],
  "commonauth.util.CommonAuthThreadPoolExecutor.getExecutor" : [ "commonauth.util.CommonAuthThreadPoolExecutor.getExecutor" ],
  "commonauth.configurations.CacheConfig.cacheManager" : [ "org.springframework.cache.caffeine.CaffeineCacheManager.<init>", "org.springframework.cache.caffeine.CaffeineCacheManager.setCaffeine" ],
  "commonauth.exceptions.TemporaryBlockedOtpException.<init>" : [ "commonauth.exceptions.TemporaryBlockedException.<init>" ],
  "commonauth.services.impl.PasswordLessCustomAuthServiceImpl.createInitAuthResponse" : [ "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.setChallengeName", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.adminInitiateAuthResult", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.isAuth", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.setChallengeParameters", "commonauth.entities.responses.InitAuthResponse.builder", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.is2FARequired", "commonauth.constants.ServiceApplicationConstants$ServiceApplicationConfig.challengeName", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.<init>", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.setSession" ],
  "commonauth.aspects.ControllerAdvice.onTruecallerClientException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.exceptions.TruecallerLoginFlowException.getStatus", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.TruecallerLoginFlowException.getErrorDetail", "org.slf4j.Logger.error" ],
  "commonauth.entities.responses.CreateUserResponse.<init>" : [ "commonauth.entities.responses.GenericOperationResponse.<init>" ],
  "commonauth.configurations.StreamMetricsConfiguration.timedAspect" : [ "io.micrometer.core.aop.TimedAspect.<init>" ],
  "commonauth.entities.db.ServiceApplication$ServiceApplicationBuilder.build" : [ "commonauth.entities.db.ServiceApplication.<init>" ],
  "commonauth.services.impl.ValidationServiceImpl.handleGenerateOtp" : [ "commonauth.services.impl.ValidationServiceImpl.updateCurrentStateGenerateOtp", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.db.OtpVerificationDetails.getUpdatedOn", "commonauth.clients.NotificationSvcClient.sendOtpWhatsApp", "commonauth.entities.requests.OtpChannelRequest.getRequestId", "org.slf4j.Logger.warn", "commonauth.exceptions.TemporaryBlockedException.<init>", "commonauth.util.Utility.createWhatsAppRequest", "commonauth.entities.responses.OtpChannelResponse.setOtpId", "commonauth.entities.db.OtpVerificationDetails.getOtpVerificationStatus", "commonauth.enums.OtpChannel.getValText", "commonauth.dao.OtpVerificationDetailsDAO.findByOtpChannelAndOtpChannelValAndLockId", "commonauth.clients.NotificationSvcClient.sendOtpSms", "commonauth.util.Utility.generateRandom", "commonauth.entities.requests.OtpChannelRequest.getAppId", "commonauth.entities.db.OtpVerificationDetails.<init>", "commonauth.enums.OtpVerificationStatus.getValText", "commonauth.entities.db.OtpVerificationDetails.getId", "commonauth.entities.db.ServiceApplication.getOtpSize", "commonauth.entities.requests.OtpChannelRequest.getChannel", "commonauth.util.Utility.getHashByOtpAndChannelVal", "commonauth.entities.responses.OtpChannelResponse.setMessage", "commonauth.dao.OtpVerificationDetailsDAO.findByKeyName", "commonauth.dao.OtpVerificationDetailsDAO.insertOtp", "commonauth.entities.responses.OtpChannelResponse.<init>", "commonauth.entities.requests.OtpChannelRequest.getChannelValue", "commonauth.entities.requests.OtpChannelRequest.getLockId", "commonauth.clients.NotificationSvcClient.sendOtpToEmail", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.requests.OtpChannelRequest.getSource", "commonauth.entities.responses.OtpChannelResponse.setChannelValueStatus", "commonauth.entities.db.OtpVerificationDetails.getOtpChannelVal" ],
  "commonauth.util.CDBUtils.is2FARequired" : [ "commonauth.util.CDBUtils.parseKnownDevices", "org.apache.logging.log4j.util.Strings.isBlank", "commonauth.enums.Environment.val", "commonauth.util.CDBUtils.isTimestampOlderThan30Days", "commonauth.util.MaskingUtils.maskUserAttributes", "org.slf4j.Logger.info", "commonauth.util.CDBUtils.isEnvProdOrProdInt" ],
  "commonauth.services.impl.OtpValidationServiceImpl.verifyResponse" : [ "commonauth.clients.CognitoClient.getHeadlessTokenUsingMobileNumber", "commonauth.services.impl.OtpValidationServiceImpl.isVerifyOtpFunctionalityAccessible", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.exceptions.HttpClientException.<init>", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannel", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannelValue", "commonauth.dao.OtpVerificationDetailsDAO.findByOtpChannelAndOtpChannelValAndLockId", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.enums.OtpVerificationStatus.getValText", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setMessage", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setStatus", "commonauth.entities.db.OtpVerificationDetails.getOtpFailedAttempts", "commonauth.dao.OtpVerificationDetailsDAO.updateByOtpId", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setAuthCode", "commonauth.services.impl.OtpValidationServiceImpl.storeTokensInDB", "commonauth.entities.db.OtpVerificationDetails.setAttempts", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getAppId", "commonauth.exceptions.OTPValidationFlowException.<init>", "commonauth.entities.db.ServiceApplication.getOtpFailedAttempts", "commonauth.services.impl.OtpValidationServiceImpl.isOtpValid", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.<init>", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getLockId", "commonauth.entities.db.OtpVerificationDetails.setUpdatedOn", "commonauth.entities.db.OtpVerificationDetails.setOtpFailedAttempts", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult" ],
  "commonauth.util.Utility.getMDCXRequestId" : [ "org.apache.logging.log4j.util.Strings.isBlank", "org.slf4j.MDC.get" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.toString" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getCountryCode", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getStreet", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getCity", "commonauth.entities.truecaller.TruecallerUserProfileResponse$Address.getZipcode" ],
  "commonauth.aspects.ControllerAdvice.onHttpRequestMethodNotSupportedException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "org.springframework.http.HttpStatus.value", "org.springframework.web.HttpRequestMethodNotSupportedException.getMessage", "org.slf4j.Logger.error" ],
  "commonauth.entities.db.UserLogin.equals" : [ "commonauth.entities.db.UserLogin.getLastFailedLoginAttempt", "commonauth.entities.db.UserLogin.getFailedLoginCount", "commonauth.entities.db.UserLogin.getUsername", "commonauth.entities.db.UserLogin.canEqual", "commonauth.entities.db.UserLogin.getId", "commonauth.entities.db.UserLogin.getAppId", "commonauth.entities.db.UserLogin.getIsLocked", "commonauth.entities.db.UserLogin.getLockUntil" ],
  "commonauth.util.CDBUtils$KnownDevice.hashCode" : [ "commonauth.util.CDBUtils$KnownDevice.getDeviceId", "commonauth.util.CDBUtils$KnownDevice.getTimestamp" ],
  "commonauth.controllers.ValidationController.resendOtp" : [ "commonauth.services.impl.MerchantAuthServiceImpl.resendOtp", "commonauth.entities.twoFactorAuthentication.ResendOtpRequest.getAppId", "org.slf4j.Logger.info", "org.slf4j.Logger.error" ],
  "commonauth.aspects.ControllerAdvice.onInitAuthWrongCredException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.metrics.Metrics.incrementCognitoBadRequestError", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.OtpValidationServiceImpl.isOtpValid" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannelValue", "commonauth.util.Utility.getHashByOtpAndChannelVal", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getOtpValue", "commonauth.entities.db.OtpVerificationDetails.getEncryptedOtpToken" ],
  "commonauth.controllers.UserLoginController.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.build" : [ "commonauth.entities.responses.GenericOperationResponse.<init>" ],
  "commonauth.util.MaskingUtils.mask2FAChannel" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.util.MaskingUtils.genericMask", "commonauth.util.MaskingUtils.maskPhoneNumber", "commonauth.util.MaskingUtils.maskEmail" ],
  "commonauth.entities.twoFactorAuthentication.TwoFALoginData$TwoFALoginDataBuilder.build" : [ "commonauth.entities.twoFactorAuthentication.TwoFALoginData.<init>" ],
  "commonauth.entities.requests.InitiateLoginResponse.toString" : [ "commonauth.entities.requests.InitiateLoginResponse.getRedirectUrl", "commonauth.entities.requests.InitiateLoginResponse.getLoginRequestId" ],
  "commonauth.entities.requests.InitiateLoginRequest.hashCode" : [ "commonauth.entities.requests.InitiateLoginRequest.getNotifyUrl", "commonauth.entities.requests.InitiateLoginRequest.getIdentifierType", "commonauth.entities.requests.InitiateLoginRequest.getIdentifierId", "commonauth.entities.requests.InitiateLoginRequest.getLoginTheme" ],
  "commonauth.entities.Constants$CaptchaSource.<clinit>" : [ "commonauth.entities.Constants$CaptchaSource.$values", "commonauth.entities.Constants$CaptchaSource.<init>" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleVerifyToken" : [ "commonauth.entities.db.ServiceApplication.getClientId", "commonauth.services.impl.AuthenticationServiceImpl.getTrimmedToken", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.entities.requests.VerifyTokenRequest.getAppId", "commonauth.entities.responses.VerifyTokenResponse.<init>", "commonauth.token.Token.cognitoJwtVerifier", "org.slf4j.Logger.error", "com.amazonaws.services.cognitoidp.model.GetUserResult.getUserAttributes", "commonauth.entities.responses.VerifyTokenResponse$VerifyTokenResponseBuilder.build", "commonauth.entities.responses.VerifyTokenResponse.builder", "commonauth.exceptions.VerifyTokenNotAuthorizedException.<init>", "com.amazonaws.services.cognitoidp.model.GetUserResult.getUsername", "com.auth0.jwt.JWT.decode", "commonauth.entities.requests.VerifyTokenRequest.getTokenType", "commonauth.clients.impl.GoogleAuthClientImpl.validateGoogleIdTokenAndExtractEmail", "commonauth.clients.CognitoClient.getUser", "commonauth.enums.TokenType.name", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "com.amazonaws.services.cognitoidp.model.GetUserRequest.<init>", "commonauth.entities.db.ServiceApplication.getRegion", "commonauth.entities.requests.VerifyTokenRequest.getToken", "commonauth.entities.db.ServiceApplication.getUserPoolId", "com.auth0.jwt.interfaces.DecodedJWT.getClaim", "commonauth.entities.responses.VerifyTokenResponse$VerifyTokenResponseBuilder.valid", "commonauth.entities.responses.VerifyTokenResponse$VerifyTokenResponseBuilder.userAttributesMap", "com.amazonaws.services.cognitoidp.model.GetUserRequest.setAccessToken" ],
  "commonauth.clients.CognitoClient.lambda$adminDisableUser$9" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminDisableUser" ],
  "commonauth.services.impl.OtpValidationServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.clients.CognitoClient.lambda$getUser$3" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.getUser" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.handleInitAuth" : [ "commonauth.entities.requests.InitAuthRequest.getLoginMeta", "commonauth.services.impl.MerchantAuthServiceImpl.populateUsername", "commonauth.entities.requests.InitAuthRequest.isVerifyEmail", "commonauth.util.MaskingUtils.maskUserAttributes", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.channelValue", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authCode", "commonauth.entities.requests.InitAuthRequest.getDeviceId", "commonauth.entities.responses.RegionProxyData.getCountryCode", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.accessToken", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.secondary2FAChannels", "commonauth.util.CDBUtils.getCountryProxyInfo", "commonauth.entities.responses.InitAuthResponse.getRefreshToken", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.entities.errorclasses.OTPErrorDetail.getTitle", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.<init>", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.channel", "commonauth.enums.OtpChannel.getValText", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.appId", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setStatus", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.otpCacheId", "commonauth.entities.requests.InitAuthRequest.getPassword", "commonauth.services.impl.MerchantAuthServiceImpl.blockBlackListedCountrySignin", "commonauth.entities.db.Login2FACache.<init>", "commonauth.services.AuthenticationService.handleInitAuthCMS", "commonauth.entities.mongo.LoginMeta.setAppId", "commonauth.entities.db.Login2FACache.getChannelType", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.twoFAChannels", "commonauth.entities.responses.InitAuthResponse.getAuthCode", "commonauth.entities.responses.InitAuthResponse.builder", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.is2FARequired", "commonauth.entities.requests.InitAuthRequest.getIp", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.exceptions.HttpClientException.getOtpErrorDetail", "commonauth.util.CDBUtils.get2FAChannelValue", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setTitle", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.twoFALoginData", "commonauth.services.impl.MerchantAuthServiceImpl.get2FAChannels", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.builder", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.requests.InitAuthRequest.isForeignCountryLoginAllowed", "commonauth.entities.db.Login2FACache.getChannelVal", "commonauth.exceptions.GenericException.<init>", "commonauth.services.impl.MerchantAuthServiceImpl.set2faPrefs", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.build", "commonauth.entities.requests.InitAuthRequest.is2faMandatory", "com.amazonaws.services.cognitoidp.model.UserNotFoundException.<init>", "commonauth.entities.errorclasses.OTPErrorDetail.getStatus", "commonauth.enums.OtpChannel.valueOf", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getTitle", "commonauth.exceptions.OtpRequestValidationException.<init>", "commonauth.services.impl.MerchantAuthServiceImpl.storeInRedis", "org.slf4j.Logger.info", "org.slf4j.Logger.error", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.setMessage", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.adminInitiateAuthResult", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.isAuth", "org.slf4j.Logger.debug", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getMessage", "commonauth.services.impl.MerchantAuthServiceImpl.validatePassword", "commonauth.dao.LoginMetaDAO.insertLoginMeta", "commonauth.entities.mongo.LoginMeta.setUsername", "commonauth.entities.requests.InitAuthRequest.getAuthFlowType", "commonauth.entities.responses.InitAuthResponse.getAuth", "commonauth.entities.twoFactorAuthentication.TwoFALoginData$TwoFALoginDataBuilder.channelValue", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.refreshToken", "commonauth.entities.requests.InitAuthRequest.isEligibleForForeignCountryCheck", "commonauth.services.impl.MerchantAuthServiceImpl.checkLoginAccessFromCountry", "commonauth.util.CDBUtils.is2FARequired", "commonauth.services.impl.MerchantAuthServiceImpl.updateKnownDevicesInCognito", "commonauth.services.impl.MerchantAuthServiceImpl.getUserAction", "commonauth.util.CDBUtils.getUserAttributes", "commonauth.util.CDBUtils.trimLockId", "commonauth.services.ValidationService.generateOtpV2", "commonauth.entities.twoFactorAuthentication.TwoFALoginData$TwoFALoginDataBuilder.channel", "commonauth.services.impl.MerchantAuthServiceImpl.get2FAChannelBasedOnEnv", "commonauth.enums.UserAction.getVal", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getStatus", "commonauth.entities.twoFactorAuthentication.TwoFALoginData$TwoFALoginDataBuilder.build", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.lockId", "commonauth.entities.responses.InitAuthResponse.getAccessToken", "commonauth.entities.responses.InitAuthResponse$InitAuthResponseBuilder.authenticationFailed", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2$GenerateOtpRequestV2Builder.build", "commonauth.entities.twoFactorAuthentication.TwoFALoginData.builder", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.util.CDBUtils.checkIfOTPAccountBlockRequired" : [ "commonauth.exceptions.HttpClientException.getErrorData" ],
  "commonauth.entities.responses.GenericOperationResponse.equals" : [ "commonauth.entities.responses.GenericOperationResponse.isSuccess", "commonauth.entities.responses.GenericOperationResponse.canEqual", "commonauth.entities.responses.GenericOperationResponse.getHttpStatus", "commonauth.entities.responses.GenericOperationResponse.getCode", "commonauth.entities.responses.GenericOperationResponse.getDetail", "commonauth.entities.responses.GenericOperationResponse.getData" ],
  "commonauth.entities.requests.G2FaQrCodeResponse.toString" : [ "commonauth.entities.requests.G2FaQrCodeResponse.getQrUrl", "commonauth.entities.requests.G2FaQrCodeResponse.getSetupKey", "commonauth.entities.requests.G2FaQrCodeResponse.getQrCode" ],
  "commonauth.aspects.ControllerAdvice.onCommonAuthServerException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.springframework.http.ResponseEntity.status", "commonauth.exceptions.CommonAuthServerException.getErrorDetail" ],
  "commonauth.entities.truecaller.TruecallerUserProfileResponse.hashCode" : [ "commonauth.entities.truecaller.TruecallerUserProfileResponse.getOnlineIdentities", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getAvatarUrl", "commonauth.entities.truecaller.TruecallerUserProfileResponse.isActive", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getName", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getAddresses", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getGender", "commonauth.entities.truecaller.TruecallerUserProfileResponse.getPhoneNumbers" ],
  "commonauth.enums.LoginStatus.<clinit>" : [ "commonauth.enums.LoginStatus.$values", "commonauth.enums.LoginStatus.<init>" ],
  "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.builder" : [ "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2$VerifyOtpRequestV2Builder.<init>" ],
  "commonauth.util.CDBUtils.getCountryProxyInfo" : [ "commonauth.enums.WhitelistedCountries.getCountryName", "commonauth.enums.WhitelistedCountries.name", "commonauth.entities.responses.RegionProxyData.setCountryName", "commonauth.entities.responses.RegionProxyData.setProxyType", "commonauth.entities.responses.RegionProxyData.setCountryCode", "commonauth.clients.ShieldSvcClient.getRegionAndProxyDetails", "org.slf4j.Logger.error", "commonauth.entities.responses.RegionProxyData.<init>" ],
  "commonauth.entities.requests.UpdateUserRequest$UpdateUserRequestBuilder.build" : [ "commonauth.entities.requests.UpdateUserRequest.<init>" ],
  "commonauth.services.impl.ValidationServiceImpl.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.services.impl.ApplicationServiceImpl.deleteById" : [ "commonauth.dao.ServiceApplicationDAO.deleteById" ],
  "commonauth.util.MaskingUtils.maskChannelValue" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.util.MaskingUtils.genericMask", "commonauth.util.MaskingUtils.maskPhoneNumber", "commonauth.util.MaskingUtils.maskEmail" ],
  "commonauth.controllers.ApplicationController.updateApplicationConfig" : [ "commonauth.services.ApplicationService.addOrUpdateApplicationConfig", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.build", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.success", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.detail", "commonauth.entities.responses.GenericOperationResponse.builder", "org.slf4j.Logger.info", "commonauth.entities.responses.GenericOperationResponse$GenericOperationResponseBuilder.code" ],
  "commonauth.clients.CognitoClient.initAuthNoAuthRequired" : [ "commonauth.entities.responses.InitAuthResponse.setAuth", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getRefreshToken", "commonauth.clients.CognitoClient.initAuthCustomAuth", "commonauth.entities.responses.InitAuthResponse.setAuthCode", "commonauth.entities.responses.InitAuthResponse.setAuthenticationFailed", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getChallengeName", "commonauth.entities.responses.InitAuthResponse.setAdminInitiateAuthResult", "org.apache.commons.lang3.StringUtils.isNotEmpty", "commonauth.clients.CognitoClient.storeTokensInDB", "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.getAccessToken", "commonauth.entities.responses.InitAuthResponse.setRefreshToken", "commonauth.entities.responses.InitAuthResponse.<init>", "commonauth.entities.requests.InitAuthRequest.getUsername", "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.getAuthenticationResult", "commonauth.entities.responses.InitAuthResponse.setAccessToken" ],
  "commonauth.entities.db.Login2FACache.hashCode" : [ "commonauth.entities.db.Login2FACache.getDeviceId", "commonauth.entities.db.Login2FACache.getLockId", "commonauth.entities.db.Login2FACache.getLoginMeta", "commonauth.entities.db.Login2FACache.getUserName", "commonauth.entities.db.Login2FACache.getChannelType", "commonauth.entities.db.Login2FACache.getChannelVal", "commonauth.entities.db.Login2FACache.getAuthCode", "commonauth.entities.db.Login2FACache.getEmail", "commonauth.entities.db.Login2FACache.getSecondary2FAChannels" ],
  "commonauth.services.impl.ValidationServiceImpl.verifyOtpV2" : [ "commonauth.services.impl.ValidationServiceImpl.isOtpValid", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.setLockId", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setMessage", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setStatus", "commonauth.entities.db.OtpVerificationDetails.getOtpFailedAttempts", "commonauth.dao.ServiceApplicationDAO.findById", "commonauth.dao.OtpVerificationDetailsDAO.updateByOtpId", "commonauth.exceptions.HttpClientException.<init>", "commonauth.entities.db.OtpVerificationDetails.setAttempts", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannel", "org.slf4j.Logger.error", "commonauth.util.CDBUtils.trimLockId", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getAppId", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getChannelValue", "commonauth.entities.db.ServiceApplication.getOtpFailedAttempts", "commonauth.dao.OtpVerificationDetailsDAO.findByOtpChannelAndOtpChannelValAndLockId", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.<init>", "commonauth.entities.db.OtpVerificationDetails.setOtpVerificationStatus", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getLockId", "commonauth.entities.db.OtpVerificationDetails.setUpdatedOn", "commonauth.services.impl.ValidationServiceImpl.isVerifyOtpFunctionalityAccessible", "commonauth.entities.db.OtpVerificationDetails.setOtpFailedAttempts", "commonauth.enums.OtpVerificationStatus.getValText" ],
  "commonauth.clients.CognitoClient.lambda$revokeTokens$15" : [ "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.revokeToken" ],
  "commonauth.entities.requests.InitAuthRequest.toString" : [ "commonauth.util.MaskingUtils.maskUserName", "commonauth.util.MaskingUtils.genericMask", "commonauth.util.MaskingUtils.maskPhoneNumber", "commonauth.util.MaskingUtils.maskEmail" ],
  "commonauth.util.filters.CustomHttpServletRequestWrapper$CustomServletInputStream.<init>" : [ "jakarta.servlet.ServletInputStream.<init>" ],
  "commonauth.configurations.RedisConfig.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.util.CDBUtils$1.<clinit>" : [ "commonauth.enums.OtpChannel.values", "commonauth.enums.OtpChannel.ordinal" ],
  "commonauth.util.G2faUrlBuilder.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.token.Token.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.factory.AWSCognitoIdentityProviderFactory.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.requests.OtpChannelRequest.hashCode" : [ "commonauth.entities.requests.OtpChannelRequest.getChannelValue", "commonauth.entities.requests.OtpChannelRequest.getLockId", "commonauth.entities.requests.OtpChannelRequest.getChannel", "commonauth.entities.requests.OtpChannelRequest.getSource", "commonauth.entities.requests.OtpChannelRequest.getRequestId", "commonauth.entities.requests.OtpChannelRequest.getAppId" ],
  "commonauth.entities.responses.EnableDisableUserResponse$EnableDisableUserResponseBuilder.build" : [ "commonauth.entities.responses.EnableDisableUserResponse.<init>" ],
  "commonauth.services.impl.UserServiceImpl.handleUpdateUser" : [ "commonauth.dao.AuditLogsDAO.saveAuditLog", "commonauth.services.impl.UserServiceImpl.handleAdminUserUpdate", "org.slf4j.Logger.info", "commonauth.entities.mongo.AuditLogs.setUserName", "commonauth.entities.requests.UpdateUserRequest.getAccessToken", "commonauth.entities.requests.UpdateUserRequest.getUserAttributes", "com.amazonaws.services.cognitoidp.model.GetUserResult.getUserAttributes", "commonauth.entities.requests.UpdateUserRequest.isAdmin", "commonauth.entities.requests.UpdateUserRequest.getUsername", "commonauth.entities.responses.GenericOperationResponse.<init>", "commonauth.util.CDBUtils.getUpdatedKnownDevices", "org.apache.logging.log4j.util.Strings.isNotBlank", "commonauth.util.Utility.userAttributesMapToList", "commonauth.entities.mongo.AuditLogs.<init>", "commonauth.entities.mongo.AuditLogs.setOldData", "commonauth.clients.CognitoClient.getUser", "commonauth.entities.mongo.AuditLogs.setNewData", "commonauth.util.Utility.userAttributesListToMap", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.util.CDBUtils.getUserAttributes", "com.amazonaws.services.cognitoidp.model.GetUserRequest.<init>", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.mongo.AuditLogs.setUserAction", "com.amazonaws.services.cognitoidp.model.GetUserRequest.withAccessToken", "commonauth.entities.requests.UpdateUserRequest.getAppId", "commonauth.exceptions.GenericException.<init>", "commonauth.entities.mongo.AuditLogs.setAppId", "commonauth.services.impl.UserServiceImpl.handleUserUpdate", "commonauth.constants.Constants$AuditLogUserActions.value" ],
  "commonauth.exceptions.UserNotAuthorizedException.<init>" : [ "commonauth.exceptions.CommonAuthGenericException.<init>" ],
  "commonauth.util.MaskingUtils.maskEmail" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.util.MaskingUtils.genericMask" ],
  "commonauth.entities.requests.OtpChannelRequest.toString" : [ "commonauth.util.MaskingUtils.genericMask" ],
  "commonauth.entities.errorclasses.OTPErrorDetail.toString" : [ "commonauth.entities.errorclasses.OTPErrorDetail.getTitle", "commonauth.entities.errorclasses.OTPErrorDetail.getMessage", "commonauth.entities.errorclasses.OTPErrorDetail.getStatus" ],
  "commonauth.clients.CognitoClient.describeClient" : [ "com.amazonaws.services.cognitoidp.model.DescribeUserPoolClientRequest.setClientId", "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.describeUserPoolClient", "com.amazonaws.services.cognitoidp.model.DescribeUserPoolClientRequest.<init>", "com.amazonaws.services.cognitoidp.model.DescribeUserPoolClientRequest.setUserPoolId" ],
  "commonauth.entities.requests.InitAuthRequest.hashCode" : [ "commonauth.entities.requests.InitAuthRequest.getLoginMeta", "commonauth.entities.requests.InitAuthRequest.getAuthFlowType", "commonauth.entities.requests.InitAuthRequest.getPassword", "commonauth.entities.requests.InitAuthRequest.is2faMandatory", "commonauth.entities.requests.InitAuthRequest.getEmail", "commonauth.entities.requests.InitAuthRequest.isVerifyEmail", "commonauth.entities.requests.InitAuthRequest.getAliasUserName", "commonauth.entities.requests.InitAuthRequest.getIp", "commonauth.entities.requests.InitAuthRequest.isEligibleForForeignCountryCheck", "commonauth.entities.requests.InitAuthRequest.getDeviceId", "commonauth.entities.requests.InitAuthRequest.getPhoneNumber", "commonauth.entities.requests.InitAuthRequest.getGoogleIdToken", "commonauth.entities.requests.InitAuthRequest.getMerchant2FAPrefs", "commonauth.entities.requests.InitAuthRequest.getEntityId", "commonauth.entities.requests.InitAuthRequest.getAppId", "commonauth.entities.requests.InitAuthRequest.getAccountAlias", "commonauth.entities.requests.InitAuthRequest.isForeignCountryLoginAllowed", "commonauth.entities.requests.InitAuthRequest.getEntityType", "commonauth.entities.requests.InitAuthRequest.getUsername" ],
  "commonauth.entities.requests.G2FaQrCodeResponse.<init>" : [ "commonauth.entities.responses.GenericOperationResponse.<init>" ],
  "commonauth.controllers.AuthController.verify" : [ "commonauth.services.AuthenticationService.handleVerifyToken" ],
  "commonauth.controllers.AuthController.logout" : [ "commonauth.services.AuthenticationService.handleLogOut", "org.slf4j.Logger.info" ],
  "commonauth.constants.Constants$AuditLogUserActions.values" : [ "[Lcommonauth.constants.Constants$AuditLogUserActions;.clone" ],
  "commonauth.services.impl.UserServiceImpl.handleAdminUserUpdate" : [ "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.withUsername", "com.amazonaws.services.cognitoidp.model.InvalidParameterException.getMessage", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.withUserAttributes", "commonauth.entities.requests.UpdateUserRequest.getUsername", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.withUserPoolId", "commonauth.exceptions.GenericException.<init>", "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.<init>", "org.slf4j.Logger.error", "commonauth.clients.CognitoClient.getUserPoolId", "commonauth.clients.CognitoClient.updateUserAttributes" ],
  "commonauth.util.G2FAUtil.generateQRCode" : [ "javax.imageio.ImageIO.write", "com.google.zxing.qrcode.QRCodeWriter.<init>", "com.google.zxing.qrcode.QRCodeWriter.encode", "com.google.zxing.client.j2se.MatrixToImageWriter.toBufferedImage", "commonauth.exceptions.GenericException.<init>", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.MerchantAuthServiceImpl.verifyOtpV2" : [ "commonauth.entities.db.Login2FACache.getLoginMeta", "commonauth.entities.mongo.LoginMeta.getMerchantId", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.setLockId", "commonauth.entities.db.Login2FACache.getUserName", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.setChannel", "commonauth.util.CDBUtils.checkIfOTPAccountBlockRequired", "commonauth.exceptions.HttpClientException.<init>", "commonauth.entities.db.Login2FACache.getAuthCode", "commonauth.entities.responses.AuthCodeExchangeResponse.getJwtRefreshToken", "commonauth.enums.OtpVerificationStatus.getValText", "commonauth.entities.db.Login2FACache.getDeviceId", "commonauth.repository.UserLoginRepository.findByAppIdAndUsername", "commonauth.entities.db.UserLogin$UserLoginBuilder.appId", "commonauth.entities.db.UserLogin.setIsLocked", "commonauth.entities.db.Login2FACache.getChannelType", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setAuthCode", "commonauth.entities.db.UserLogin.setLockUntil", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.db.UserLogin$UserLoginBuilder.username", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getAppId", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.db.Login2FACache.getChannelVal", "commonauth.clients.NotificationSvcClient.notifyAccountLock", "commonauth.entities.db.Login2FACache.getEmail", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setRefreshToken", "commonauth.services.impl.MerchantAuthServiceImpl.fetchCache2FALoginData", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.setChannelValue", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setAccessToken", "commonauth.entities.mongo.LoginMeta.getUserId", "commonauth.entities.db.Login2FACache.getLockId", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.getStatus", "commonauth.repository.UserLoginRepository.save", "org.slf4j.Logger.info", "commonauth.entities.responses.AuthCodeExchangeResponse.getJwtToken", "org.slf4j.Logger.error", "org.slf4j.Logger.debug", "commonauth.entities.db.UserLogin.builder", "commonauth.entities.twoFactorAuthentication.VerifyOtpResponseV2.setUserAttributes", "commonauth.dao.LoginMetaDAO.insertLoginMeta", "commonauth.entities.db.UserLogin$UserLoginBuilder.build", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.getOtpCacheId", "commonauth.services.ValidationService.verifyOtpV2", "commonauth.entities.mongo.LoginMeta.getUserType", "commonauth.entities.twoFactorAuthentication.VerifyOtpRequestV2.verifyOtpRequestV2Validation", "commonauth.services.impl.MerchantAuthServiceImpl.updateKnownDevicesInCognito", "commonauth.util.CDBUtils.getUserAttributes", "commonauth.services.AuthenticationService.handleGetTokens", "commonauth.entities.db.UserLogin$UserLoginBuilder.lastFailedLoginAttempt", "commonauth.entities.requests.GetTokenRequest.<init>" ],
  "commonauth.aspects.ControllerAdvice.onHttpClientException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.errorclasses.OTPErrorDetail.getStatus", "org.springframework.http.ResponseEntity.status", "org.slf4j.Logger.error", "commonauth.exceptions.HttpClientException.getOtpErrorDetail" ],
  "commonauth.aspects.ControllerAdvice.onLimitExceededException" : [ "org.springframework.http.ResponseEntity.badRequest", "org.springframework.http.ResponseEntity$BodyBuilder.body", "org.slf4j.Logger.error" ],
  "commonauth.exceptions.BadRequestException.<init>" : [ "commonauth.exceptions.CommonAuthDefaultException.<init>" ],
  "commonauth.dao.impl.LoginMetaDAOImpl.insertLoginMeta" : [ "commonauth.repository.mongo.LoginMetaRepo.save" ],
  "commonauth.aspects.ControllerAdvice.onURISyntaxException" : [ "org.springframework.http.ResponseEntity.internalServerError", "org.slf4j.Logger.error", "org.springframework.http.ResponseEntity$BodyBuilder.build" ],
  "commonauth.entities.errorclasses.OTPErrorDetail.hashCode" : [ "commonauth.entities.errorclasses.OTPErrorDetail.getTitle", "commonauth.entities.errorclasses.OTPErrorDetail.getMessage", "commonauth.entities.errorclasses.OTPErrorDetail.getStatus" ],
  "commonauth.token.Token.cognitoJwtVerifier" : [ "com.auth0.jwt.JWTVerifier.verify", "com.auth0.jwt.algorithms.Algorithm.RSA256", "com.auth0.jwt.JWT.require", "commonauth.token.AwsCognitoRSAKeyProvider.<init>", "org.slf4j.Logger.error", "com.auth0.jwt.interfaces.Verification.build" ],
  "commonauth.entities.errorclasses.ErrorDetailV2.hashCode" : [ "commonauth.entities.errorclasses.ErrorDetailV2.getReason", "commonauth.entities.errorclasses.ErrorDetailV2.getStatus", "commonauth.entities.errorclasses.ErrorDetailV2.getMessage" ],
  "commonauth.services.impl.UserServiceImpl.auditCreateUser" : [ "commonauth.entities.mongo.AuditLogs.<init>", "commonauth.dao.AuditLogsDAO.saveAuditLog", "commonauth.entities.mongo.AuditLogs.setUserAction", "commonauth.entities.requests.CreateUserRequest.getUsername", "commonauth.entities.requests.CreateUserRequest.getAppId", "commonauth.entities.mongo.AuditLogs.setNewData", "commonauth.entities.mongo.AuditLogs.setAppId", "commonauth.entities.mongo.AuditLogs.setUserName" ],
  "commonauth.util.CDBUtils$KnownDevice.toString" : [ "commonauth.util.CDBUtils$KnownDevice.getDeviceId", "commonauth.util.CDBUtils$KnownDevice.getTimestamp" ],
  "commonauth.entities.responses.GenericOperationResponse.withErrorMessage" : [ "commonauth.entities.responses.GenericOperationResponse.setHttpStatus", "commonauth.entities.responses.GenericOperationResponse.setCode", "commonauth.entities.responses.GenericOperationResponse.setSuccess", "commonauth.entities.responses.GenericOperationResponse.setDetail" ],
  "commonauth.services.impl.AuthenticationServiceImpl.handleReissueToken" : [ "commonauth.entities.db.AuthcodeTokenPair.getRefreshToken", "commonauth.services.impl.AuthenticationServiceImpl.handleRefreshToken", "commonauth.entities.requests.ReissueTokenRequest.getAuthCode", "commonauth.entities.requests.ReissueTokenRequest.getToken", "commonauth.dao.AuthcodeTokenPairDAO.findByAuthCode", "commonauth.entities.requests.RefreshTokenRequest.setAppId", "commonauth.entities.requests.ReissueTokenRequest.getRefresh", "commonauth.clients.CognitoClient.reissueToken", "commonauth.entities.requests.ReissueTokenRequest.getAppId", "commonauth.factory.impl.CognitoFactoryCachedImpl.getCognitoClient", "commonauth.entities.requests.RefreshTokenRequest.<init>", "org.apache.commons.lang3.StringUtils.isNotBlank", "org.springframework.http.HttpStatus.name", "commonauth.entities.requests.ReissueTokenRequest.getUsername", "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.exceptions.GenericException.<init>", "commonauth.util.Utility.extractClaim", "commonauth.entities.requests.RefreshTokenRequest.setToken" ],
  "commonauth.entities.responses.VerifyTokenResponse$VerifyTokenResponseBuilder.build" : [ "commonauth.entities.responses.VerifyTokenResponse.<init>" ],
  "commonauth.util.Utility.lambda$userAttributesListToMap$0" : [ "com.amazonaws.services.cognitoidp.model.AttributeType.getName", "com.amazonaws.services.cognitoidp.model.AttributeType.getValue" ],
  "commonauth.configurations.ApplicationThreadPool.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.util.G2FAUtil.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.util.G2FAUtil.generateSecret" : [ "org.apache.commons.codec.binary.Base32.encode", "org.apache.commons.codec.binary.Base32.<init>" ],
  "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.hashCode" : [ "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getMessage", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getStatus", "commonauth.entities.twoFactorAuthentication.GenerateOtpResponseV2.getTitle" ],
  "commonauth.entities.db.UserLogin$UserLoginBuilder.build" : [ "commonauth.entities.db.UserLogin.<init>" ],
  "commonauth.services.impl.TruecallerLoginImpl.handleUserConsentStatus" : [ "commonauth.entities.truecaller.TruecallerCallbackRequest.getEndpoint", "commonauth.entities.db.AuthcodeTokenPair.setStatus", "org.apache.commons.lang3.StringUtils.isNotBlank", "commonauth.entities.db.AuthcodeTokenPair.setMetadata", "commonauth.entities.truecaller.TruecallerCallbackRequest.getAccessToken", "commonauth.entities.db.AuthcodeTokenPair.setToken", "commonauth.entities.truecaller.TruecallerCallbackRequest.getStatus", "commonauth.entities.db.AuthcodeTokenPair.getMetadata", "org.slf4j.Logger.info", "commonauth.entities.db.AuthcodeTokenPair.setRemarks", "org.apache.logging.log4j.util.Strings.isNotBlank" ],
  "commonauth.aspects.ControllerAdvice.handleDataIntegrityExceptions" : [ "commonauth.entities.errorclasses.OTPErrorDetail.setMessage", "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.entities.errorclasses.OTPErrorDetail.setStatus", "org.springframework.http.ResponseEntity.status", "org.springframework.http.HttpStatus.value", "commonauth.entities.errorclasses.OTPErrorDetail.<init>", "commonauth.entities.errorclasses.OTPErrorDetail.setTitle", "org.slf4j.Logger.error" ],
  "commonauth.enums.FilterAttribute.<clinit>" : [ "commonauth.enums.FilterAttribute.<init>", "commonauth.enums.FilterAttribute.$values" ],
  "commonauth.util.filters.Slf4jMDCFilter.cleanup" : [ "org.slf4j.MDC.clear" ],
  "commonauth.enums.OtpVerificationStatus.<clinit>" : [ "commonauth.enums.OtpVerificationStatus.$values", "commonauth.enums.OtpVerificationStatus.<init>" ],
  "commonauth.controllers.DevController.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.util.Utility.getHashByOtpAndChannelVal" : [ "org.apache.commons.codec.digest.DigestUtils.sha256Hex" ],
  "commonauth.util.filters.FilterConfig.datadogTaggingFilter" : [ "org.springframework.boot.web.servlet.FilterRegistrationBean.<init>", "org.springframework.boot.web.servlet.FilterRegistrationBean.setOrder", "org.springframework.boot.web.servlet.FilterRegistrationBean.setFilter", "org.springframework.boot.web.servlet.FilterRegistrationBean.addUrlPatterns", "commonauth.util.filters.DatadogTaggingFilter.<init>" ],
  "commonauth.entities.db.AuthcodeTokenPair.builder" : [ "commonauth.entities.db.AuthcodeTokenPair$AuthcodeTokenPairBuilder.<init>" ],
  "commonauth.util.CDBUtils.getUserAttributes" : [ "com.amazonaws.services.cognitoidp.model.AttributeType.getName", "commonauth.clients.CognitoClient.getUser", "com.amazonaws.services.cognitoidp.model.AttributeType.getValue" ],
  "commonauth.configurations.TimeZoneConfig.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.controllers.ValidationController.initiate2fa" : [ "commonauth.services.ValidationService.generateOtpV2", "commonauth.entities.twoFactorAuthentication.GenerateOtpRequestV2.generateOtpRequestV2Validation", "org.slf4j.Logger.info", "org.slf4j.Logger.error" ],
  "commonauth.services.impl.PartnersAuthServiceImpl.validatePassword" : [ "org.apache.commons.lang3.StringUtils.isBlank", "commonauth.exceptions.GenericException.<init>" ],
  "commonauth.dao.impl.OtpVerificationDetailsDAOimpl.findByKeyNameAndAddedOn" : [ "commonauth.repository.OtpVerificationDetailsRepository.findByOtpChannelValOrderByIdDesc" ],
  "commonauth.util.G2FAUtil.generateTOTP" : [ "commonauth.util.G2FAUtil.hmacSha" ],
  "commonauth.token.AwsCognitoRSAKeyProvider.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.equals" : [ "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getStatus", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getLoginRequestId", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.canEqual", "commonauth.entities.truecaller.TruecallerNotifyConsentStatus.getData" ],
  "commonauth.configurations.AWSCredentialsProviderConfig.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.responses.InitAuthResponse$ErrorData.equals" : [ "commonauth.entities.responses.InitAuthResponse$ErrorData.getLoginAttemptsLeft", "commonauth.entities.responses.InitAuthResponse$ErrorData.getLockedForMinutes", "commonauth.entities.responses.InitAuthResponse$ErrorData.canEqual", "commonauth.entities.responses.InitAuthResponse$ErrorData.getStatusCode", "commonauth.entities.responses.InitAuthResponse$ErrorData.getMessage" ],
  "commonauth.entities.responses.GenericErrorResponse.builder" : [ "commonauth.entities.responses.GenericErrorResponse$GenericErrorResponseBuilder.<init>" ],
  "commonauth.aspects.ControllerAdvice.ConfirmForgotPassException" : [ "org.springframework.http.ResponseEntity$BodyBuilder.body", "commonauth.exceptions.ConfirmForgotPassException.getMessage", "commonauth.entities.responses.ConfirmForgotPassResponse$ConfirmForgotPassResponseBuilder.message", "org.springframework.http.ResponseEntity.status", "commonauth.entities.responses.ConfirmForgotPassResponse.builder", "commonauth.entities.responses.ConfirmForgotPassResponse$ConfirmForgotPassResponseBuilder.build", "org.slf4j.Logger.error" ],
  "commonauth.aspects.ControllerAdvice.<clinit>" : [ "org.slf4j.LoggerFactory.getLogger" ],
  "commonauth.entities.db.Login2FACache.toString" : [ "commonauth.entities.db.Login2FACache.getDeviceId", "commonauth.entities.db.Login2FACache.getLockId", "commonauth.entities.db.Login2FACache.getLoginMeta", "commonauth.entities.db.Login2FACache.getUserName", "commonauth.entities.db.Login2FACache.getChannelType", "commonauth.entities.db.Login2FACache.getChannelVal", "commonauth.entities.db.Login2FACache.getAuthCode", "commonauth.entities.db.Login2FACache.getEmail", "commonauth.entities.db.Login2FACache.getSecondary2FAChannels" ]
}